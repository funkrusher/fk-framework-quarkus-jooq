package org.fk.core.test.database.coretestdatabase.tables.dtos;

import org.fk.core.dto.BookKeeper;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.xml.bind.annotation.XmlTransient;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.fk.core.dto.AbstractDTO;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.util.UUID;

import org.fk.core.test.database.coretestdatabase.tables.interfaces.IBasic2;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Basic2Dto<T extends Basic2Dto> extends AbstractDTO implements IBasic2 {

    private static final long serialVersionUID = 1L;

    // -------------------------------------------------------------------------
    // Database-Fields (must exist in the associated database table)
    // -------------------------------------------------------------------------
 
    private UUID uuidId;
    private String string1;
    private String string2;
    private Integer clientId;

    // -------------------------------------------------------------------------
    // Constructor(s)
    // -------------------------------------------------------------------------
 
    public Basic2Dto() {}

    public Basic2Dto(IBasic2 value) { this.from(value); }

    // -------------------------------------------------------------------------
    // Database-Fields Setters/Getters
    // -------------------------------------------------------------------------
 
    /**
     * Getter for <code>coreTestDatabase.Basic2.uuidId</code>.
     */
    @NotNull
    @Override
    public UUID getUuidId() {
        return this.uuidId;
    }

    /**
     * Setter for <code>coreTestDatabase.Basic2.uuidId</code>.
     */
    @Override
    public T setUuidId(UUID uuidId) {
        this.uuidId = uuidId;
        this.keeper.touch("uuidId");
        return (T) this;
    }

    /**
     * Getter for <code>coreTestDatabase.Basic2.string1</code>.
     */
    @Size(max = 50)
    @Override
    public String getString1() {
        return this.string1;
    }

    /**
     * Setter for <code>coreTestDatabase.Basic2.string1</code>.
     */
    @Override
    public T setString1(String string1) {
        this.string1 = string1;
        this.keeper.touch("string1");
        return (T) this;
    }

    /**
     * Getter for <code>coreTestDatabase.Basic2.string2</code>.
     */
    @Size(max = 50)
    @Override
    public String getString2() {
        return this.string2;
    }

    /**
     * Setter for <code>coreTestDatabase.Basic2.string2</code>.
     */
    @Override
    public T setString2(String string2) {
        this.string2 = string2;
        this.keeper.touch("string2");
        return (T) this;
    }

    /**
     * Getter for <code>coreTestDatabase.Basic2.clientId</code>.
     */
    @NotNull
    @Override
    public Integer getClientId() {
        return this.clientId;
    }

    /**
     * Setter for <code>coreTestDatabase.Basic2.clientId</code>.
     */
    @Override
    public T setClientId(Integer clientId) {
        this.clientId = clientId;
        this.keeper.touch("clientId");
        return (T) this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IBasic2 from) {
        setUuidId(from.getUuidId());
        setString1(from.getString1());
        setString2(from.getString2());
        setClientId(from.getClientId());
    }

    @Override
    public <E extends IBasic2> E into(E into) {
        into.from(this);
        return into;
    }

}
