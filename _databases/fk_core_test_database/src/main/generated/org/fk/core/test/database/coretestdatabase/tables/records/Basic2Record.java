/*
 * This file is generated by jOOQ.
 */
package org.fk.core.test.database.coretestdatabase.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.util.UUID;

import org.fk.core.test.database.coretestdatabase.tables.Basic2;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Basic2Record extends UpdatableRecordImpl<Basic2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>coreTestDatabase.Basic2.uuidId</code>.
     */
    public Basic2Record setUuidid(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>coreTestDatabase.Basic2.uuidId</code>.
     */
    @NotNull
    public UUID getUuidid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>coreTestDatabase.Basic2.string1</code>.
     */
    public Basic2Record setString1(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>coreTestDatabase.Basic2.string1</code>.
     */
    @Size(max = 50)
    public String getString1() {
        return (String) get(1);
    }

    /**
     * Setter for <code>coreTestDatabase.Basic2.string2</code>.
     */
    public Basic2Record setString2(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>coreTestDatabase.Basic2.string2</code>.
     */
    @Size(max = 50)
    public String getString2() {
        return (String) get(2);
    }

    /**
     * Setter for <code>coreTestDatabase.Basic2.clientId</code>.
     */
    public Basic2Record setClientid(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>coreTestDatabase.Basic2.clientId</code>.
     */
    @NotNull
    public Integer getClientid() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached Basic2Record
     */
    public Basic2Record() {
        super(Basic2.BASIC2);
    }

    /**
     * Create a detached, initialised Basic2Record
     */
    public Basic2Record(UUID uuidid, String string1, String string2, Integer clientid) {
        super(Basic2.BASIC2);

        setUuidid(uuidid);
        setString1(string1);
        setString2(string2);
        setClientid(clientid);
        resetChangedOnNotNull();
    }
}
