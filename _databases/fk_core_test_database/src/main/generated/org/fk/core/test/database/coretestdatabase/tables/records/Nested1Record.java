/*
 * This file is generated by jOOQ.
 */
package org.fk.core.test.database.coretestdatabase.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.util.UUID;

import org.fk.core.test.database.coretestdatabase.tables.Nested1;
import org.fk.core.test.database.coretestdatabase.tables.interfaces.INested1;
import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Nested1Record extends UpdatableRecordImpl<Nested1Record> implements INested1 {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>coreTestDatabase.Nested1.autoIncId</code>.
     */
    @Override
    public Nested1Record setAutoIncId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>coreTestDatabase.Nested1.autoIncId</code>.
     */
    @NotNull
    @Override
    public Integer getAutoIncId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>coreTestDatabase.Nested1.uuidId</code>.
     */
    @Override
    public Nested1Record setUuidId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>coreTestDatabase.Nested1.uuidId</code>.
     */
    @NotNull
    @Override
    public UUID getUuidId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>coreTestDatabase.Nested1.string1</code>.
     */
    @Override
    public Nested1Record setString1(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>coreTestDatabase.Nested1.string1</code>.
     */
    @Size(max = 50)
    @Override
    public String getString1() {
        return (String) get(2);
    }

    /**
     * Setter for <code>coreTestDatabase.Nested1.string2</code>.
     */
    @Override
    public Nested1Record setString2(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>coreTestDatabase.Nested1.string2</code>.
     */
    @Size(max = 50)
    @Override
    public String getString2() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, UUID> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(INested1 from) {
        setAutoIncId(from.getAutoIncId());
        setUuidId(from.getUuidId());
        setString1(from.getString1());
        setString2(from.getString2());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends INested1> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached Nested1Record
     */
    public Nested1Record() {
        super(Nested1.NESTED1);
    }

    /**
     * Create a detached, initialised Nested1Record
     */
    public Nested1Record(Integer autoIncId, UUID uuidId, String string1, String string2) {
        super(Nested1.NESTED1);

        setAutoIncId(autoIncId);
        setUuidId(uuidId);
        setString1(string1);
        setString2(string2);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised Nested1Record
     */
    public Nested1Record(org.fk.core.test.database.coretestdatabase.tables.pojos.Nested1 value) {
        super(Nested1.NESTED1);

        if (value != null) {
            setAutoIncId(value.getAutoIncId());
            setUuidId(value.getUuidId());
            setString1(value.getString1());
            setString2(value.getString2());
            resetChangedOnNotNull();
        }
    }
}
