/*
 * This file is generated by jOOQ.
 */
package org.fk.coreTestDatabase.coretestdatabase.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.fk.coreTestDatabase.coretestdatabase.tables.Product;
import org.fk.coreTestDatabase.coretestdatabase.tables.interfaces.IProduct;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductRecord extends UpdatableRecordImpl<ProductRecord> implements IProduct {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>coreTestDatabase.product.productId</code>.
     */
    @Override
    public void setProductId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>coreTestDatabase.product.productId</code>.
     */
    @Override
    public Long getProductId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>coreTestDatabase.product.clientId</code>.
     */
    @Override
    public void setClientId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>coreTestDatabase.product.clientId</code>.
     */
    @NotNull
    @Override
    public Integer getClientId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>coreTestDatabase.product.price</code>.
     */
    @Override
    public void setPrice(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>coreTestDatabase.product.price</code>.
     */
    @NotNull
    @Override
    public BigDecimal getPrice() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>coreTestDatabase.product.typeId</code>.
     */
    @Override
    public void setTypeId(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>coreTestDatabase.product.typeId</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String getTypeId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>coreTestDatabase.product.createdAt</code>.
     */
    @Override
    public void setCreatedAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>coreTestDatabase.product.createdAt</code>.
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>coreTestDatabase.product.updatedAt</code>.
     */
    @Override
    public void setUpdatedAt(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>coreTestDatabase.product.updatedAt</code>.
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>coreTestDatabase.product.deleted</code>.
     */
    @Override
    public void setDeleted(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>coreTestDatabase.product.deleted</code>.
     */
    @Override
    public Boolean getDeleted() {
        return (Boolean) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IProduct from) {
        setProductId(from.getProductId());
        setClientId(from.getClientId());
        setPrice(from.getPrice());
        setTypeId(from.getTypeId());
        setCreatedAt(from.getCreatedAt());
        setUpdatedAt(from.getUpdatedAt());
        setDeleted(from.getDeleted());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IProduct> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProductRecord
     */
    public ProductRecord() {
        super(Product.PRODUCT);
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    public ProductRecord(Long productId, Integer clientId, BigDecimal price, String typeId, LocalDateTime createdAt, LocalDateTime updatedAt, Boolean deleted) {
        super(Product.PRODUCT);

        setProductId(productId);
        setClientId(clientId);
        setPrice(price);
        setTypeId(typeId);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setDeleted(deleted);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    public ProductRecord(org.fk.coreTestDatabase.coretestdatabase.tables.dtos.Product value) {
        super(Product.PRODUCT);

        if (value != null) {
            setProductId(value.getProductId());
            setClientId(value.getClientId());
            setPrice(value.getPrice());
            setTypeId(value.getTypeId());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            setDeleted(value.getDeleted());
            resetChangedOnNotNull();
        }
    }
}
