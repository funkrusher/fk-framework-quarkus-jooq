/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.fk.database1.testshop.Testshop;
import org.fk.database1.testshop.tables.records.DatainitRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Datainit extends TableImpl<DatainitRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testshop.DataInit</code>
     */
    public static final Datainit DATAINIT = new Datainit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DatainitRecord> getRecordType() {
        return DatainitRecord.class;
    }

    /**
     * The column <code>testshop.DataInit.dataInitId</code>.
     */
    public final TableField<DatainitRecord, String> DATAINITID = createField(DSL.name("dataInitId"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>testshop.DataInit.createdAt</code>.
     */
    public final TableField<DatainitRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    private Datainit(Name alias, Table<DatainitRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Datainit(Name alias, Table<DatainitRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testshop.DataInit</code> table reference
     */
    public Datainit(String alias) {
        this(DSL.name(alias), DATAINIT);
    }

    /**
     * Create an aliased <code>testshop.DataInit</code> table reference
     */
    public Datainit(Name alias) {
        this(alias, DATAINIT);
    }

    /**
     * Create a <code>testshop.DataInit</code> table reference
     */
    public Datainit() {
        this(DSL.name("DataInit"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testshop.TESTSHOP;
    }

    @Override
    public Datainit as(String alias) {
        return new Datainit(DSL.name(alias), this);
    }

    @Override
    public Datainit as(Name alias) {
        return new Datainit(alias, this);
    }

    @Override
    public Datainit as(Table<?> alias) {
        return new Datainit(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Datainit rename(String name) {
        return new Datainit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Datainit rename(Name name) {
        return new Datainit(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Datainit rename(Table<?> name) {
        return new Datainit(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Datainit where(Condition condition) {
        return new Datainit(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Datainit where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Datainit where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Datainit where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Datainit where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Datainit where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Datainit where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Datainit where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Datainit whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Datainit whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
