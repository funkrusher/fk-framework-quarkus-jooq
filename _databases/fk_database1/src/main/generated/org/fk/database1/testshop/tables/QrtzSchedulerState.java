/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables;


import java.util.Collection;

import org.fk.database1.testshop.Keys;
import org.fk.database1.testshop.Testshop;
import org.fk.database1.testshop.tables.records.QrtzSchedulerStateRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzSchedulerState extends TableImpl<QrtzSchedulerStateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testshop.QRTZ_SCHEDULER_STATE</code>
     */
    public static final QrtzSchedulerState QRTZ_SCHEDULER_STATE = new QrtzSchedulerState();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QrtzSchedulerStateRecord> getRecordType() {
        return QrtzSchedulerStateRecord.class;
    }

    /**
     * The column <code>testshop.QRTZ_SCHEDULER_STATE.SCHED_NAME</code>.
     */
    public final TableField<QrtzSchedulerStateRecord, String> SCHED_NAME = createField(DSL.name("SCHED_NAME"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_SCHEDULER_STATE.INSTANCE_NAME</code>.
     */
    public final TableField<QrtzSchedulerStateRecord, String> INSTANCE_NAME = createField(DSL.name("INSTANCE_NAME"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_SCHEDULER_STATE.LAST_CHECKIN_TIME</code>.
     */
    public final TableField<QrtzSchedulerStateRecord, Long> LAST_CHECKIN_TIME = createField(DSL.name("LAST_CHECKIN_TIME"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_SCHEDULER_STATE.CHECKIN_INTERVAL</code>.
     */
    public final TableField<QrtzSchedulerStateRecord, Long> CHECKIN_INTERVAL = createField(DSL.name("CHECKIN_INTERVAL"), SQLDataType.BIGINT.nullable(false), this, "");

    private QrtzSchedulerState(Name alias, Table<QrtzSchedulerStateRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private QrtzSchedulerState(Name alias, Table<QrtzSchedulerStateRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testshop.QRTZ_SCHEDULER_STATE</code> table
     * reference
     */
    public QrtzSchedulerState(String alias) {
        this(DSL.name(alias), QRTZ_SCHEDULER_STATE);
    }

    /**
     * Create an aliased <code>testshop.QRTZ_SCHEDULER_STATE</code> table
     * reference
     */
    public QrtzSchedulerState(Name alias) {
        this(alias, QRTZ_SCHEDULER_STATE);
    }

    /**
     * Create a <code>testshop.QRTZ_SCHEDULER_STATE</code> table reference
     */
    public QrtzSchedulerState() {
        this(DSL.name("QRTZ_SCHEDULER_STATE"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testshop.TESTSHOP;
    }

    @Override
    public UniqueKey<QrtzSchedulerStateRecord> getPrimaryKey() {
        return Keys.KEY_QRTZ_SCHEDULER_STATE_PRIMARY;
    }

    @Override
    public QrtzSchedulerState as(String alias) {
        return new QrtzSchedulerState(DSL.name(alias), this);
    }

    @Override
    public QrtzSchedulerState as(Name alias) {
        return new QrtzSchedulerState(alias, this);
    }

    @Override
    public QrtzSchedulerState as(Table<?> alias) {
        return new QrtzSchedulerState(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSchedulerState rename(String name) {
        return new QrtzSchedulerState(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSchedulerState rename(Name name) {
        return new QrtzSchedulerState(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSchedulerState rename(Table<?> name) {
        return new QrtzSchedulerState(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSchedulerState where(Condition condition) {
        return new QrtzSchedulerState(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSchedulerState where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSchedulerState where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSchedulerState where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzSchedulerState where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzSchedulerState where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzSchedulerState where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzSchedulerState where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSchedulerState whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSchedulerState whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
