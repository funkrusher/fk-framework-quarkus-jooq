/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.fk.database1.testshop.Keys;
import org.fk.database1.testshop.Testshop;
import org.fk.database1.testshop.tables.QrtzTriggers.QrtzTriggersPath;
import org.fk.database1.testshop.tables.records.QrtzSimpleTriggersRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzSimpleTriggers extends TableImpl<QrtzSimpleTriggersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testshop.QRTZ_SIMPLE_TRIGGERS</code>
     */
    public static final QrtzSimpleTriggers QRTZ_SIMPLE_TRIGGERS = new QrtzSimpleTriggers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QrtzSimpleTriggersRecord> getRecordType() {
        return QrtzSimpleTriggersRecord.class;
    }

    /**
     * The column <code>testshop.QRTZ_SIMPLE_TRIGGERS.SCHED_NAME</code>.
     */
    public final TableField<QrtzSimpleTriggersRecord, String> SCHED_NAME = createField(DSL.name("SCHED_NAME"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPLE_TRIGGERS.TRIGGER_NAME</code>.
     */
    public final TableField<QrtzSimpleTriggersRecord, String> TRIGGER_NAME = createField(DSL.name("TRIGGER_NAME"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPLE_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public final TableField<QrtzSimpleTriggersRecord, String> TRIGGER_GROUP = createField(DSL.name("TRIGGER_GROUP"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPLE_TRIGGERS.REPEAT_COUNT</code>.
     */
    public final TableField<QrtzSimpleTriggersRecord, Long> REPEAT_COUNT = createField(DSL.name("REPEAT_COUNT"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPLE_TRIGGERS.REPEAT_INTERVAL</code>.
     */
    public final TableField<QrtzSimpleTriggersRecord, Long> REPEAT_INTERVAL = createField(DSL.name("REPEAT_INTERVAL"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPLE_TRIGGERS.TIMES_TRIGGERED</code>.
     */
    public final TableField<QrtzSimpleTriggersRecord, Long> TIMES_TRIGGERED = createField(DSL.name("TIMES_TRIGGERED"), SQLDataType.BIGINT.nullable(false), this, "");

    private QrtzSimpleTriggers(Name alias, Table<QrtzSimpleTriggersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private QrtzSimpleTriggers(Name alias, Table<QrtzSimpleTriggersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testshop.QRTZ_SIMPLE_TRIGGERS</code> table
     * reference
     */
    public QrtzSimpleTriggers(String alias) {
        this(DSL.name(alias), QRTZ_SIMPLE_TRIGGERS);
    }

    /**
     * Create an aliased <code>testshop.QRTZ_SIMPLE_TRIGGERS</code> table
     * reference
     */
    public QrtzSimpleTriggers(Name alias) {
        this(alias, QRTZ_SIMPLE_TRIGGERS);
    }

    /**
     * Create a <code>testshop.QRTZ_SIMPLE_TRIGGERS</code> table reference
     */
    public QrtzSimpleTriggers() {
        this(DSL.name("QRTZ_SIMPLE_TRIGGERS"), null);
    }

    public <O extends Record> QrtzSimpleTriggers(Table<O> path, ForeignKey<O, QrtzSimpleTriggersRecord> childPath, InverseForeignKey<O, QrtzSimpleTriggersRecord> parentPath) {
        super(path, childPath, parentPath, QRTZ_SIMPLE_TRIGGERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class QrtzSimpleTriggersPath extends QrtzSimpleTriggers implements Path<QrtzSimpleTriggersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> QrtzSimpleTriggersPath(Table<O> path, ForeignKey<O, QrtzSimpleTriggersRecord> childPath, InverseForeignKey<O, QrtzSimpleTriggersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private QrtzSimpleTriggersPath(Name alias, Table<QrtzSimpleTriggersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public QrtzSimpleTriggersPath as(String alias) {
            return new QrtzSimpleTriggersPath(DSL.name(alias), this);
        }

        @Override
        public QrtzSimpleTriggersPath as(Name alias) {
            return new QrtzSimpleTriggersPath(alias, this);
        }

        @Override
        public QrtzSimpleTriggersPath as(Table<?> alias) {
            return new QrtzSimpleTriggersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testshop.TESTSHOP;
    }

    @Override
    public UniqueKey<QrtzSimpleTriggersRecord> getPrimaryKey() {
        return Keys.KEY_QRTZ_SIMPLE_TRIGGERS_PRIMARY;
    }

    @Override
    public List<ForeignKey<QrtzSimpleTriggersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.QRTZ_SIMPLE_TRIGGERS_IBFK_1);
    }

    private transient QrtzTriggersPath _QRTZ_SIMPLE_TRIGGERS_ibfk_1;

    /**
     * Get the implicit join path to the <code>testshop.QRTZ_TRIGGERS</code>
     * table.
     */
    public QrtzTriggersPath QRTZ_SIMPLE_TRIGGERS_ibfk_1() {
        if (_QRTZ_SIMPLE_TRIGGERS_ibfk_1 == null)
            _QRTZ_SIMPLE_TRIGGERS_ibfk_1 = new QrtzTriggersPath(this, Keys.QRTZ_SIMPLE_TRIGGERS_IBFK_1, null);

        return _QRTZ_SIMPLE_TRIGGERS_ibfk_1;
    }

    @Override
    public QrtzSimpleTriggers as(String alias) {
        return new QrtzSimpleTriggers(DSL.name(alias), this);
    }

    @Override
    public QrtzSimpleTriggers as(Name alias) {
        return new QrtzSimpleTriggers(alias, this);
    }

    @Override
    public QrtzSimpleTriggers as(Table<?> alias) {
        return new QrtzSimpleTriggers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSimpleTriggers rename(String name) {
        return new QrtzSimpleTriggers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSimpleTriggers rename(Name name) {
        return new QrtzSimpleTriggers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSimpleTriggers rename(Table<?> name) {
        return new QrtzSimpleTriggers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSimpleTriggers where(Condition condition) {
        return new QrtzSimpleTriggers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSimpleTriggers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSimpleTriggers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSimpleTriggers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzSimpleTriggers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzSimpleTriggers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzSimpleTriggers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzSimpleTriggers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSimpleTriggers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSimpleTriggers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
