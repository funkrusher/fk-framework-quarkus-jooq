package org.fk.database1.testshop.tables.dtos;

import org.fk.core.dto.DTO;
import org.fk.core.dto.BookKeeper;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import jakarta.xml.bind.annotation.XmlTransient;
import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import org.fk.database1.testshop.tables.interfaces.IDatabasechangelog;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DatabasechangelogDto implements IDatabasechangelog, DTO {

    private static final long serialVersionUID = 1L;

    // -------------------------------------------------------------------------
    // Database-Fields (must exist in the associated database table)
    // -------------------------------------------------------------------------
 
    private String ID;
    private String AUTHOR;
    private String FILENAME;
    @Schema(example = "1618312800000", type = SchemaType.NUMBER, format = "date-time", description = "Timestamp in milliseconds since 1970-01-01T00:00:00Z")
    private LocalDateTime DATEEXECUTED;
    private Integer ORDEREXECUTED;
    private String EXECTYPE;
    private String MD5SUM;
    private String DESCRIPTION;
    private String COMMENTS;
    private String TAG;
    private String LIQUIBASE;
    private String CONTEXTS;
    private String LABELS;
    private String DEPLOYMENT_ID;

    // -------------------------------------------------------------------------
    // Non-Database-Fields (please define your additional fields here)
    // -------------------------------------------------------------------------
 
    // -------------------------------------------------------------------------
    // Constructor(s)
    // -------------------------------------------------------------------------
 
    public DatabasechangelogDto() { this.keeper = new BookKeeper(this); }

    // -------------------------------------------------------------------------
    // Database-Fields Setters/Getters
    // -------------------------------------------------------------------------
 
    /**
     * Getter for <code>testshop.DATABASECHANGELOG.ID</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String ID() {
        return this.ID;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.ID</code>.
     */
    @Override
    public Databasechangelog ID(String ID) {
        this.ID = ID;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.AUTHOR</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String AUTHOR() {
        return this.AUTHOR;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.AUTHOR</code>.
     */
    @Override
    public Databasechangelog AUTHOR(String AUTHOR) {
        this.AUTHOR = AUTHOR;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.FILENAME</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String FILENAME() {
        return this.FILENAME;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.FILENAME</code>.
     */
    @Override
    public Databasechangelog FILENAME(String FILENAME) {
        this.FILENAME = FILENAME;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.DATEEXECUTED</code>.
     */
    @NotNull
    @Override
    public LocalDateTime DATEEXECUTED() {
        return this.DATEEXECUTED;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.DATEEXECUTED</code>.
     */
    @Override
    public Databasechangelog DATEEXECUTED(LocalDateTime DATEEXECUTED) {
        this.DATEEXECUTED = DATEEXECUTED;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.ORDEREXECUTED</code>.
     */
    @NotNull
    @Override
    public Integer ORDEREXECUTED() {
        return this.ORDEREXECUTED;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.ORDEREXECUTED</code>.
     */
    @Override
    public Databasechangelog ORDEREXECUTED(Integer ORDEREXECUTED) {
        this.ORDEREXECUTED = ORDEREXECUTED;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.EXECTYPE</code>.
     */
    @NotNull
    @Size(max = 10)
    @Override
    public String EXECTYPE() {
        return this.EXECTYPE;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.EXECTYPE</code>.
     */
    @Override
    public Databasechangelog EXECTYPE(String EXECTYPE) {
        this.EXECTYPE = EXECTYPE;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.MD5SUM</code>.
     */
    @Size(max = 35)
    @Override
    public String MD5SUM() {
        return this.MD5SUM;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.MD5SUM</code>.
     */
    @Override
    public Databasechangelog MD5SUM(String MD5SUM) {
        this.MD5SUM = MD5SUM;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.DESCRIPTION</code>.
     */
    @Size(max = 255)
    @Override
    public String DESCRIPTION() {
        return this.DESCRIPTION;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.DESCRIPTION</code>.
     */
    @Override
    public Databasechangelog DESCRIPTION(String DESCRIPTION) {
        this.DESCRIPTION = DESCRIPTION;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.COMMENTS</code>.
     */
    @Size(max = 255)
    @Override
    public String COMMENTS() {
        return this.COMMENTS;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.COMMENTS</code>.
     */
    @Override
    public Databasechangelog COMMENTS(String COMMENTS) {
        this.COMMENTS = COMMENTS;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.TAG</code>.
     */
    @Size(max = 255)
    @Override
    public String TAG() {
        return this.TAG;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.TAG</code>.
     */
    @Override
    public Databasechangelog TAG(String TAG) {
        this.TAG = TAG;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.LIQUIBASE</code>.
     */
    @Size(max = 20)
    @Override
    public String LIQUIBASE() {
        return this.LIQUIBASE;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.LIQUIBASE</code>.
     */
    @Override
    public Databasechangelog LIQUIBASE(String LIQUIBASE) {
        this.LIQUIBASE = LIQUIBASE;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.CONTEXTS</code>.
     */
    @Size(max = 255)
    @Override
    public String CONTEXTS() {
        return this.CONTEXTS;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.CONTEXTS</code>.
     */
    @Override
    public Databasechangelog CONTEXTS(String CONTEXTS) {
        this.CONTEXTS = CONTEXTS;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.LABELS</code>.
     */
    @Size(max = 255)
    @Override
    public String LABELS() {
        return this.LABELS;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.LABELS</code>.
     */
    @Override
    public Databasechangelog LABELS(String LABELS) {
        this.LABELS = LABELS;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.DEPLOYMENT_ID</code>.
     */
    @Size(max = 10)
    @Override
    public String DEPLOYMENT_ID() {
        return this.DEPLOYMENT_ID;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.DEPLOYMENT_ID</code>.
     */
    @Override
    public Databasechangelog DEPLOYMENT_ID(String DEPLOYMENT_ID) {
        this.DEPLOYMENT_ID = DEPLOYMENT_ID;
        return this;
    }

    // -------------------------------------------------------------------------
    // Non-Database-Fields Setters/Getters (please define here)
    // -------------------------------------------------------------------------
 
    // -------------------------------------------------------------------------
    // ToString, Equals, HashCode
    // -------------------------------------------------------------------------
 
    @Override
    public String toString() {
        return keeper.touchedToString();
    }
 
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DTO other = (DTO) obj;
        return this.keeper.touchedEquals(other);
    }
 
    @Override
    public int hashCode() {
        return this.keeper.touchedHashCode();
    }
 
    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDatabasechangelog from) {
        ID(from.ID());
        AUTHOR(from.AUTHOR());
        FILENAME(from.FILENAME());
        DATEEXECUTED(from.DATEEXECUTED());
        ORDEREXECUTED(from.ORDEREXECUTED());
        EXECTYPE(from.EXECTYPE());
        MD5SUM(from.MD5SUM());
        DESCRIPTION(from.DESCRIPTION());
        COMMENTS(from.COMMENTS());
        TAG(from.TAG());
        LIQUIBASE(from.LIQUIBASE());
        CONTEXTS(from.CONTEXTS());
        LABELS(from.LABELS());
        DEPLOYMENT_ID(from.DEPLOYMENT_ID());
    }
    @Override
    public <E extends IDatabasechangelog> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // BookKeeper (Patching Updates Support)
    // -------------------------------------------------------------------------
     
    @JsonIgnore
    @XmlTransient
    protected transient BookKeeper keeper;
 
    @JsonIgnore
    @XmlTransient
    public BookKeeper getBookKeeper() {
        return keeper;
    }
}
