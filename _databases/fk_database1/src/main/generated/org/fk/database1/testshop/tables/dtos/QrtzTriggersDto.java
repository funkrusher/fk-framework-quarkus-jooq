/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.pojos;
import org.fk.core.dto.DTO;
import org.fk.core.dto.BookKeeper;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import jakarta.xml.bind.annotation.XmlTransient;
import com.fasterxml.jackson.annotation.JsonIgnore;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.database1.testshop.tables.interfaces.IQrtzTriggers;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzTriggersDto implements IQrtzTriggers, DTO {

    private static final long serialVersionUID = 1L;

    private String SCHED_NAME;
    private String TRIGGER_NAME;
    private String TRIGGER_GROUP;
    private String JOB_NAME;
    private String JOB_GROUP;
    private String DESCRIPTION;
    private Long NEXT_FIRE_TIME;
    private Long PREV_FIRE_TIME;
    private Integer PRIORITY;
    private String TRIGGER_STATE;
    private String TRIGGER_TYPE;
    private Long START_TIME;
    private Long END_TIME;
    private String CALENDAR_NAME;
    private Short MISFIRE_INSTR;
    private byte[] JOB_DATA;

    public QrtzTriggersDto() { this.keeper = new BookKeeper(this); }


    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    @Override
    public String getSCHED_NAME() {
        return this.SCHED_NAME;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.SCHED_NAME</code>.
     */
    @Override
    public QrtzTriggersDto setSCHED_NAME(String SCHED_NAME) {
        this.SCHED_NAME = SCHED_NAME;
        this.keeper.touch("SCHED_NAME");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getTRIGGER_NAME() {
        return this.TRIGGER_NAME;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_NAME</code>.
     */
    @Override
    public QrtzTriggersDto setTRIGGER_NAME(String TRIGGER_NAME) {
        this.TRIGGER_NAME = TRIGGER_NAME;
        this.keeper.touch("TRIGGER_NAME");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getTRIGGER_GROUP() {
        return this.TRIGGER_GROUP;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @Override
    public QrtzTriggersDto setTRIGGER_GROUP(String TRIGGER_GROUP) {
        this.TRIGGER_GROUP = TRIGGER_GROUP;
        this.keeper.touch("TRIGGER_GROUP");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.JOB_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getJOB_NAME() {
        return this.JOB_NAME;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.JOB_NAME</code>.
     */
    @Override
    public QrtzTriggersDto setJOB_NAME(String JOB_NAME) {
        this.JOB_NAME = JOB_NAME;
        this.keeper.touch("JOB_NAME");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.JOB_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getJOB_GROUP() {
        return this.JOB_GROUP;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.JOB_GROUP</code>.
     */
    @Override
    public QrtzTriggersDto setJOB_GROUP(String JOB_GROUP) {
        this.JOB_GROUP = JOB_GROUP;
        this.keeper.touch("JOB_GROUP");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.DESCRIPTION</code>.
     */
    @Size(max = 250)
    @Override
    public String getDESCRIPTION() {
        return this.DESCRIPTION;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.DESCRIPTION</code>.
     */
    @Override
    public QrtzTriggersDto setDESCRIPTION(String DESCRIPTION) {
        this.DESCRIPTION = DESCRIPTION;
        this.keeper.touch("DESCRIPTION");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.NEXT_FIRE_TIME</code>.
     */
    @Override
    public Long getNEXT_FIRE_TIME() {
        return this.NEXT_FIRE_TIME;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.NEXT_FIRE_TIME</code>.
     */
    @Override
    public QrtzTriggersDto setNEXT_FIRE_TIME(Long NEXT_FIRE_TIME) {
        this.NEXT_FIRE_TIME = NEXT_FIRE_TIME;
        this.keeper.touch("NEXT_FIRE_TIME");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.PREV_FIRE_TIME</code>.
     */
    @Override
    public Long getPREV_FIRE_TIME() {
        return this.PREV_FIRE_TIME;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.PREV_FIRE_TIME</code>.
     */
    @Override
    public QrtzTriggersDto setPREV_FIRE_TIME(Long PREV_FIRE_TIME) {
        this.PREV_FIRE_TIME = PREV_FIRE_TIME;
        this.keeper.touch("PREV_FIRE_TIME");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.PRIORITY</code>.
     */
    @Override
    public Integer getPRIORITY() {
        return this.PRIORITY;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.PRIORITY</code>.
     */
    @Override
    public QrtzTriggersDto setPRIORITY(Integer PRIORITY) {
        this.PRIORITY = PRIORITY;
        this.keeper.touch("PRIORITY");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_STATE</code>.
     */
    @NotNull
    @Size(max = 16)
    @Override
    public String getTRIGGER_STATE() {
        return this.TRIGGER_STATE;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_STATE</code>.
     */
    @Override
    public QrtzTriggersDto setTRIGGER_STATE(String TRIGGER_STATE) {
        this.TRIGGER_STATE = TRIGGER_STATE;
        this.keeper.touch("TRIGGER_STATE");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_TYPE</code>.
     */
    @NotNull
    @Size(max = 8)
    @Override
    public String getTRIGGER_TYPE() {
        return this.TRIGGER_TYPE;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_TYPE</code>.
     */
    @Override
    public QrtzTriggersDto setTRIGGER_TYPE(String TRIGGER_TYPE) {
        this.TRIGGER_TYPE = TRIGGER_TYPE;
        this.keeper.touch("TRIGGER_TYPE");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.START_TIME</code>.
     */
    @NotNull
    @Override
    public Long getSTART_TIME() {
        return this.START_TIME;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.START_TIME</code>.
     */
    @Override
    public QrtzTriggersDto setSTART_TIME(Long START_TIME) {
        this.START_TIME = START_TIME;
        this.keeper.touch("START_TIME");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.END_TIME</code>.
     */
    @Override
    public Long getEND_TIME() {
        return this.END_TIME;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.END_TIME</code>.
     */
    @Override
    public QrtzTriggersDto setEND_TIME(Long END_TIME) {
        this.END_TIME = END_TIME;
        this.keeper.touch("END_TIME");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.CALENDAR_NAME</code>.
     */
    @Size(max = 190)
    @Override
    public String getCALENDAR_NAME() {
        return this.CALENDAR_NAME;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.CALENDAR_NAME</code>.
     */
    @Override
    public QrtzTriggersDto setCALENDAR_NAME(String CALENDAR_NAME) {
        this.CALENDAR_NAME = CALENDAR_NAME;
        this.keeper.touch("CALENDAR_NAME");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.MISFIRE_INSTR</code>.
     */
    @Override
    public Short getMISFIRE_INSTR() {
        return this.MISFIRE_INSTR;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.MISFIRE_INSTR</code>.
     */
    @Override
    public QrtzTriggersDto setMISFIRE_INSTR(Short MISFIRE_INSTR) {
        this.MISFIRE_INSTR = MISFIRE_INSTR;
        this.keeper.touch("MISFIRE_INSTR");
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.JOB_DATA</code>.
     */
    @Size(max = 65535)
    @Override
    public byte[] getJOB_DATA() {
        return this.JOB_DATA;
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.JOB_DATA</code>.
     */
    @Override
    public QrtzTriggersDto setJOB_DATA(byte[] JOB_DATA) {
        this.JOB_DATA = JOB_DATA;
        this.keeper.touch("JOB_DATA");
        return this;
    }

    @Override
    public String toString() {
        return keeper.touchedToString();
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DTO other = (DTO) obj;
        return this.keeper.touchedEquals(other);
    }
    @Override
    public int hashCode() {
        return this.keeper.touchedHashCode();
    }


    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IQrtzTriggers from) {
        setSCHED_NAME(from.getSCHED_NAME());
        setTRIGGER_NAME(from.getTRIGGER_NAME());
        setTRIGGER_GROUP(from.getTRIGGER_GROUP());
        setJOB_NAME(from.getJOB_NAME());
        setJOB_GROUP(from.getJOB_GROUP());
        setDESCRIPTION(from.getDESCRIPTION());
        setNEXT_FIRE_TIME(from.getNEXT_FIRE_TIME());
        setPREV_FIRE_TIME(from.getPREV_FIRE_TIME());
        setPRIORITY(from.getPRIORITY());
        setTRIGGER_STATE(from.getTRIGGER_STATE());
        setTRIGGER_TYPE(from.getTRIGGER_TYPE());
        setSTART_TIME(from.getSTART_TIME());
        setEND_TIME(from.getEND_TIME());
        setCALENDAR_NAME(from.getCALENDAR_NAME());
        setMISFIRE_INSTR(from.getMISFIRE_INSTR());
        setJOB_DATA(from.getJOB_DATA());
    }

    @Override
    public <E extends IQrtzTriggers> E into(E into) {
        into.from(this);
        return into;
    }
    // -------------------------------------------------------------------------
    // BookKeeper (Patching Updates Support)
    // -------------------------------------------------------------------------
    
    @JsonIgnore
    @XmlTransient
    protected BookKeeper keeper;
    
    @JsonIgnore
    @XmlTransient
    @Override
    public BookKeeper getBookKeeper() {
        return keeper;
    }
}
