/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.pojos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import org.fk.database1.testshop.tables.interfaces.IDatabasechangelog;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Databasechangelog implements IDatabasechangelog {

    private static final long serialVersionUID = 1L;

    private String ID;
    private String AUTHOR;
    private String FILENAME;
    private LocalDateTime DATEEXECUTED;
    private Integer ORDEREXECUTED;
    private String EXECTYPE;
    private String MD5SUM;
    private String DESCRIPTION;
    private String COMMENTS;
    private String TAG;
    private String LIQUIBASE;
    private String CONTEXTS;
    private String LABELS;
    private String DEPLOYMENT_ID;

    public Databasechangelog() {}

    public Databasechangelog(IDatabasechangelog value) {
        this.ID = value.getID();
        this.AUTHOR = value.getAUTHOR();
        this.FILENAME = value.getFILENAME();
        this.DATEEXECUTED = value.getDATEEXECUTED();
        this.ORDEREXECUTED = value.getORDEREXECUTED();
        this.EXECTYPE = value.getEXECTYPE();
        this.MD5SUM = value.getMD5SUM();
        this.DESCRIPTION = value.getDESCRIPTION();
        this.COMMENTS = value.getCOMMENTS();
        this.TAG = value.getTAG();
        this.LIQUIBASE = value.getLIQUIBASE();
        this.CONTEXTS = value.getCONTEXTS();
        this.LABELS = value.getLABELS();
        this.DEPLOYMENT_ID = value.getDEPLOYMENT_ID();
    }

    public Databasechangelog(
        String ID,
        String AUTHOR,
        String FILENAME,
        LocalDateTime DATEEXECUTED,
        Integer ORDEREXECUTED,
        String EXECTYPE,
        String MD5SUM,
        String DESCRIPTION,
        String COMMENTS,
        String TAG,
        String LIQUIBASE,
        String CONTEXTS,
        String LABELS,
        String DEPLOYMENT_ID
    ) {
        this.ID = ID;
        this.AUTHOR = AUTHOR;
        this.FILENAME = FILENAME;
        this.DATEEXECUTED = DATEEXECUTED;
        this.ORDEREXECUTED = ORDEREXECUTED;
        this.EXECTYPE = EXECTYPE;
        this.MD5SUM = MD5SUM;
        this.DESCRIPTION = DESCRIPTION;
        this.COMMENTS = COMMENTS;
        this.TAG = TAG;
        this.LIQUIBASE = LIQUIBASE;
        this.CONTEXTS = CONTEXTS;
        this.LABELS = LABELS;
        this.DEPLOYMENT_ID = DEPLOYMENT_ID;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.ID</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String getID() {
        return this.ID;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.ID</code>.
     */
    @Override
    public Databasechangelog setID(String ID) {
        this.ID = ID;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.AUTHOR</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String getAUTHOR() {
        return this.AUTHOR;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.AUTHOR</code>.
     */
    @Override
    public Databasechangelog setAUTHOR(String AUTHOR) {
        this.AUTHOR = AUTHOR;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.FILENAME</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String getFILENAME() {
        return this.FILENAME;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.FILENAME</code>.
     */
    @Override
    public Databasechangelog setFILENAME(String FILENAME) {
        this.FILENAME = FILENAME;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.DATEEXECUTED</code>.
     */
    @NotNull
    @Override
    public LocalDateTime getDATEEXECUTED() {
        return this.DATEEXECUTED;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.DATEEXECUTED</code>.
     */
    @Override
    public Databasechangelog setDATEEXECUTED(LocalDateTime DATEEXECUTED) {
        this.DATEEXECUTED = DATEEXECUTED;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.ORDEREXECUTED</code>.
     */
    @NotNull
    @Override
    public Integer getORDEREXECUTED() {
        return this.ORDEREXECUTED;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.ORDEREXECUTED</code>.
     */
    @Override
    public Databasechangelog setORDEREXECUTED(Integer ORDEREXECUTED) {
        this.ORDEREXECUTED = ORDEREXECUTED;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.EXECTYPE</code>.
     */
    @NotNull
    @Size(max = 10)
    @Override
    public String getEXECTYPE() {
        return this.EXECTYPE;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.EXECTYPE</code>.
     */
    @Override
    public Databasechangelog setEXECTYPE(String EXECTYPE) {
        this.EXECTYPE = EXECTYPE;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.MD5SUM</code>.
     */
    @Size(max = 35)
    @Override
    public String getMD5SUM() {
        return this.MD5SUM;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.MD5SUM</code>.
     */
    @Override
    public Databasechangelog setMD5SUM(String MD5SUM) {
        this.MD5SUM = MD5SUM;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.DESCRIPTION</code>.
     */
    @Size(max = 255)
    @Override
    public String getDESCRIPTION() {
        return this.DESCRIPTION;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.DESCRIPTION</code>.
     */
    @Override
    public Databasechangelog setDESCRIPTION(String DESCRIPTION) {
        this.DESCRIPTION = DESCRIPTION;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.COMMENTS</code>.
     */
    @Size(max = 255)
    @Override
    public String getCOMMENTS() {
        return this.COMMENTS;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.COMMENTS</code>.
     */
    @Override
    public Databasechangelog setCOMMENTS(String COMMENTS) {
        this.COMMENTS = COMMENTS;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.TAG</code>.
     */
    @Size(max = 255)
    @Override
    public String getTAG() {
        return this.TAG;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.TAG</code>.
     */
    @Override
    public Databasechangelog setTAG(String TAG) {
        this.TAG = TAG;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.LIQUIBASE</code>.
     */
    @Size(max = 20)
    @Override
    public String getLIQUIBASE() {
        return this.LIQUIBASE;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.LIQUIBASE</code>.
     */
    @Override
    public Databasechangelog setLIQUIBASE(String LIQUIBASE) {
        this.LIQUIBASE = LIQUIBASE;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.CONTEXTS</code>.
     */
    @Size(max = 255)
    @Override
    public String getCONTEXTS() {
        return this.CONTEXTS;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.CONTEXTS</code>.
     */
    @Override
    public Databasechangelog setCONTEXTS(String CONTEXTS) {
        this.CONTEXTS = CONTEXTS;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.LABELS</code>.
     */
    @Size(max = 255)
    @Override
    public String getLABELS() {
        return this.LABELS;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.LABELS</code>.
     */
    @Override
    public Databasechangelog setLABELS(String LABELS) {
        this.LABELS = LABELS;
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.DEPLOYMENT_ID</code>.
     */
    @Size(max = 10)
    @Override
    public String getDEPLOYMENT_ID() {
        return this.DEPLOYMENT_ID;
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.DEPLOYMENT_ID</code>.
     */
    @Override
    public Databasechangelog setDEPLOYMENT_ID(String DEPLOYMENT_ID) {
        this.DEPLOYMENT_ID = DEPLOYMENT_ID;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Databasechangelog (");

        sb.append(ID);
        sb.append(", ").append(AUTHOR);
        sb.append(", ").append(FILENAME);
        sb.append(", ").append(DATEEXECUTED);
        sb.append(", ").append(ORDEREXECUTED);
        sb.append(", ").append(EXECTYPE);
        sb.append(", ").append(MD5SUM);
        sb.append(", ").append(DESCRIPTION);
        sb.append(", ").append(COMMENTS);
        sb.append(", ").append(TAG);
        sb.append(", ").append(LIQUIBASE);
        sb.append(", ").append(CONTEXTS);
        sb.append(", ").append(LABELS);
        sb.append(", ").append(DEPLOYMENT_ID);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDatabasechangelog from) {
        setID(from.getID());
        setAUTHOR(from.getAUTHOR());
        setFILENAME(from.getFILENAME());
        setDATEEXECUTED(from.getDATEEXECUTED());
        setORDEREXECUTED(from.getORDEREXECUTED());
        setEXECTYPE(from.getEXECTYPE());
        setMD5SUM(from.getMD5SUM());
        setDESCRIPTION(from.getDESCRIPTION());
        setCOMMENTS(from.getCOMMENTS());
        setTAG(from.getTAG());
        setLIQUIBASE(from.getLIQUIBASE());
        setCONTEXTS(from.getCONTEXTS());
        setLABELS(from.getLABELS());
        setDEPLOYMENT_ID(from.getDEPLOYMENT_ID());
    }

    @Override
    public <E extends IDatabasechangelog> E into(E into) {
        into.from(this);
        return into;
    }
}
