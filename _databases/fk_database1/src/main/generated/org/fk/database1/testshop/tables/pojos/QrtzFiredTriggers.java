/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.pojos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.database1.testshop.tables.interfaces.IQrtzFiredTriggers;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzFiredTriggers implements IQrtzFiredTriggers {

    private static final long serialVersionUID = 1L;

    private String SCHED_NAME;
    private String ENTRY_ID;
    private String TRIGGER_NAME;
    private String TRIGGER_GROUP;
    private String INSTANCE_NAME;
    private Long FIRED_TIME;
    private Long SCHED_TIME;
    private Integer PRIORITY;
    private String STATE;
    private String JOB_NAME;
    private String JOB_GROUP;
    private String IS_NONCONCURRENT;
    private String REQUESTS_RECOVERY;

    public QrtzFiredTriggers() {}

    public QrtzFiredTriggers(IQrtzFiredTriggers value) {
        this.SCHED_NAME = value.SCHED_NAME();
        this.ENTRY_ID = value.ENTRY_ID();
        this.TRIGGER_NAME = value.TRIGGER_NAME();
        this.TRIGGER_GROUP = value.TRIGGER_GROUP();
        this.INSTANCE_NAME = value.INSTANCE_NAME();
        this.FIRED_TIME = value.FIRED_TIME();
        this.SCHED_TIME = value.SCHED_TIME();
        this.PRIORITY = value.PRIORITY();
        this.STATE = value.STATE();
        this.JOB_NAME = value.JOB_NAME();
        this.JOB_GROUP = value.JOB_GROUP();
        this.IS_NONCONCURRENT = value.IS_NONCONCURRENT();
        this.REQUESTS_RECOVERY = value.REQUESTS_RECOVERY();
    }

    public QrtzFiredTriggers(
        String SCHED_NAME,
        String ENTRY_ID,
        String TRIGGER_NAME,
        String TRIGGER_GROUP,
        String INSTANCE_NAME,
        Long FIRED_TIME,
        Long SCHED_TIME,
        Integer PRIORITY,
        String STATE,
        String JOB_NAME,
        String JOB_GROUP,
        String IS_NONCONCURRENT,
        String REQUESTS_RECOVERY
    ) {
        this.SCHED_NAME = SCHED_NAME;
        this.ENTRY_ID = ENTRY_ID;
        this.TRIGGER_NAME = TRIGGER_NAME;
        this.TRIGGER_GROUP = TRIGGER_GROUP;
        this.INSTANCE_NAME = INSTANCE_NAME;
        this.FIRED_TIME = FIRED_TIME;
        this.SCHED_TIME = SCHED_TIME;
        this.PRIORITY = PRIORITY;
        this.STATE = STATE;
        this.JOB_NAME = JOB_NAME;
        this.JOB_GROUP = JOB_GROUP;
        this.IS_NONCONCURRENT = IS_NONCONCURRENT;
        this.REQUESTS_RECOVERY = REQUESTS_RECOVERY;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    @Override
    public String SCHED_NAME() {
        return this.SCHED_NAME;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_NAME</code>.
     */
    @Override
    public QrtzFiredTriggers SCHED_NAME(String SCHED_NAME) {
        this.SCHED_NAME = SCHED_NAME;
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.ENTRY_ID</code>.
     */
    @NotNull
    @Size(max = 95)
    @Override
    public String ENTRY_ID() {
        return this.ENTRY_ID;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.ENTRY_ID</code>.
     */
    @Override
    public QrtzFiredTriggers ENTRY_ID(String ENTRY_ID) {
        this.ENTRY_ID = ENTRY_ID;
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String TRIGGER_NAME() {
        return this.TRIGGER_NAME;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_NAME</code>.
     */
    @Override
    public QrtzFiredTriggers TRIGGER_NAME(String TRIGGER_NAME) {
        this.TRIGGER_NAME = TRIGGER_NAME;
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String TRIGGER_GROUP() {
        return this.TRIGGER_GROUP;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @Override
    public QrtzFiredTriggers TRIGGER_GROUP(String TRIGGER_GROUP) {
        this.TRIGGER_GROUP = TRIGGER_GROUP;
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.INSTANCE_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String INSTANCE_NAME() {
        return this.INSTANCE_NAME;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.INSTANCE_NAME</code>.
     */
    @Override
    public QrtzFiredTriggers INSTANCE_NAME(String INSTANCE_NAME) {
        this.INSTANCE_NAME = INSTANCE_NAME;
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.FIRED_TIME</code>.
     */
    @NotNull
    @Override
    public Long FIRED_TIME() {
        return this.FIRED_TIME;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.FIRED_TIME</code>.
     */
    @Override
    public QrtzFiredTriggers FIRED_TIME(Long FIRED_TIME) {
        this.FIRED_TIME = FIRED_TIME;
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_TIME</code>.
     */
    @NotNull
    @Override
    public Long SCHED_TIME() {
        return this.SCHED_TIME;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_TIME</code>.
     */
    @Override
    public QrtzFiredTriggers SCHED_TIME(Long SCHED_TIME) {
        this.SCHED_TIME = SCHED_TIME;
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.PRIORITY</code>.
     */
    @NotNull
    @Override
    public Integer PRIORITY() {
        return this.PRIORITY;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.PRIORITY</code>.
     */
    @Override
    public QrtzFiredTriggers PRIORITY(Integer PRIORITY) {
        this.PRIORITY = PRIORITY;
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.STATE</code>.
     */
    @NotNull
    @Size(max = 16)
    @Override
    public String STATE() {
        return this.STATE;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.STATE</code>.
     */
    @Override
    public QrtzFiredTriggers STATE(String STATE) {
        this.STATE = STATE;
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_NAME</code>.
     */
    @Size(max = 190)
    @Override
    public String JOB_NAME() {
        return this.JOB_NAME;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_NAME</code>.
     */
    @Override
    public QrtzFiredTriggers JOB_NAME(String JOB_NAME) {
        this.JOB_NAME = JOB_NAME;
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_GROUP</code>.
     */
    @Size(max = 190)
    @Override
    public String JOB_GROUP() {
        return this.JOB_GROUP;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_GROUP</code>.
     */
    @Override
    public QrtzFiredTriggers JOB_GROUP(String JOB_GROUP) {
        this.JOB_GROUP = JOB_GROUP;
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.IS_NONCONCURRENT</code>.
     */
    @Size(max = 1)
    @Override
    public String IS_NONCONCURRENT() {
        return this.IS_NONCONCURRENT;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.IS_NONCONCURRENT</code>.
     */
    @Override
    public QrtzFiredTriggers IS_NONCONCURRENT(String IS_NONCONCURRENT) {
        this.IS_NONCONCURRENT = IS_NONCONCURRENT;
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.REQUESTS_RECOVERY</code>.
     */
    @Size(max = 1)
    @Override
    public String REQUESTS_RECOVERY() {
        return this.REQUESTS_RECOVERY;
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.REQUESTS_RECOVERY</code>.
     */
    @Override
    public QrtzFiredTriggers REQUESTS_RECOVERY(String REQUESTS_RECOVERY) {
        this.REQUESTS_RECOVERY = REQUESTS_RECOVERY;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("QrtzFiredTriggers (");

        sb.append(SCHED_NAME);
        sb.append(", ").append(ENTRY_ID);
        sb.append(", ").append(TRIGGER_NAME);
        sb.append(", ").append(TRIGGER_GROUP);
        sb.append(", ").append(INSTANCE_NAME);
        sb.append(", ").append(FIRED_TIME);
        sb.append(", ").append(SCHED_TIME);
        sb.append(", ").append(PRIORITY);
        sb.append(", ").append(STATE);
        sb.append(", ").append(JOB_NAME);
        sb.append(", ").append(JOB_GROUP);
        sb.append(", ").append(IS_NONCONCURRENT);
        sb.append(", ").append(REQUESTS_RECOVERY);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IQrtzFiredTriggers from) {
        SCHED_NAME(from.SCHED_NAME());
        ENTRY_ID(from.ENTRY_ID());
        TRIGGER_NAME(from.TRIGGER_NAME());
        TRIGGER_GROUP(from.TRIGGER_GROUP());
        INSTANCE_NAME(from.INSTANCE_NAME());
        FIRED_TIME(from.FIRED_TIME());
        SCHED_TIME(from.SCHED_TIME());
        PRIORITY(from.PRIORITY());
        STATE(from.STATE());
        JOB_NAME(from.JOB_NAME());
        JOB_GROUP(from.JOB_GROUP());
        IS_NONCONCURRENT(from.IS_NONCONCURRENT());
        REQUESTS_RECOVERY(from.REQUESTS_RECOVERY());
    }

    @Override
    public <E extends IQrtzFiredTriggers> E into(E into) {
        into.from(this);
        return into;
    }
}
