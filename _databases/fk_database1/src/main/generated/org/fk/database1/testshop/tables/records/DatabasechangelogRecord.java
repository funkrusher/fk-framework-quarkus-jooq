/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import org.fk.database1.testshop.tables.Databasechangelog;
import org.fk.database1.testshop.tables.interfaces.IDatabasechangelog;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DatabasechangelogRecord extends TableRecordImpl<DatabasechangelogRecord> implements IDatabasechangelog {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.ID</code>.
     */
    @Override
    public DatabasechangelogRecord ID(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.ID</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String ID() {
        return (String) get(0);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.AUTHOR</code>.
     */
    @Override
    public DatabasechangelogRecord AUTHOR(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.AUTHOR</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String AUTHOR() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.FILENAME</code>.
     */
    @Override
    public DatabasechangelogRecord FILENAME(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.FILENAME</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String FILENAME() {
        return (String) get(2);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.DATEEXECUTED</code>.
     */
    @Override
    public DatabasechangelogRecord DATEEXECUTED(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.DATEEXECUTED</code>.
     */
    @NotNull
    @Override
    public LocalDateTime DATEEXECUTED() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.ORDEREXECUTED</code>.
     */
    @Override
    public DatabasechangelogRecord ORDEREXECUTED(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.ORDEREXECUTED</code>.
     */
    @NotNull
    @Override
    public Integer ORDEREXECUTED() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.EXECTYPE</code>.
     */
    @Override
    public DatabasechangelogRecord EXECTYPE(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.EXECTYPE</code>.
     */
    @NotNull
    @Size(max = 10)
    @Override
    public String EXECTYPE() {
        return (String) get(5);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.MD5SUM</code>.
     */
    @Override
    public DatabasechangelogRecord MD5SUM(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.MD5SUM</code>.
     */
    @Size(max = 35)
    @Override
    public String MD5SUM() {
        return (String) get(6);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.DESCRIPTION</code>.
     */
    @Override
    public DatabasechangelogRecord DESCRIPTION(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.DESCRIPTION</code>.
     */
    @Size(max = 255)
    @Override
    public String DESCRIPTION() {
        return (String) get(7);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.COMMENTS</code>.
     */
    @Override
    public DatabasechangelogRecord COMMENTS(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.COMMENTS</code>.
     */
    @Size(max = 255)
    @Override
    public String COMMENTS() {
        return (String) get(8);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.TAG</code>.
     */
    @Override
    public DatabasechangelogRecord TAG(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.TAG</code>.
     */
    @Size(max = 255)
    @Override
    public String TAG() {
        return (String) get(9);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.LIQUIBASE</code>.
     */
    @Override
    public DatabasechangelogRecord LIQUIBASE(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.LIQUIBASE</code>.
     */
    @Size(max = 20)
    @Override
    public String LIQUIBASE() {
        return (String) get(10);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.CONTEXTS</code>.
     */
    @Override
    public DatabasechangelogRecord CONTEXTS(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.CONTEXTS</code>.
     */
    @Size(max = 255)
    @Override
    public String CONTEXTS() {
        return (String) get(11);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.LABELS</code>.
     */
    @Override
    public DatabasechangelogRecord LABELS(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.LABELS</code>.
     */
    @Size(max = 255)
    @Override
    public String LABELS() {
        return (String) get(12);
    }

    /**
     * Setter for <code>testshop.DATABASECHANGELOG.DEPLOYMENT_ID</code>.
     */
    @Override
    public DatabasechangelogRecord DEPLOYMENT_ID(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>testshop.DATABASECHANGELOG.DEPLOYMENT_ID</code>.
     */
    @Size(max = 10)
    @Override
    public String DEPLOYMENT_ID() {
        return (String) get(13);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDatabasechangelog from) {
        ID(from.ID());
        AUTHOR(from.AUTHOR());
        FILENAME(from.FILENAME());
        DATEEXECUTED(from.DATEEXECUTED());
        ORDEREXECUTED(from.ORDEREXECUTED());
        EXECTYPE(from.EXECTYPE());
        MD5SUM(from.MD5SUM());
        DESCRIPTION(from.DESCRIPTION());
        COMMENTS(from.COMMENTS());
        TAG(from.TAG());
        LIQUIBASE(from.LIQUIBASE());
        CONTEXTS(from.CONTEXTS());
        LABELS(from.LABELS());
        DEPLOYMENT_ID(from.DEPLOYMENT_ID());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IDatabasechangelog> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DatabasechangelogRecord
     */
    public DatabasechangelogRecord() {
        super(Databasechangelog.DATABASECHANGELOG);
    }

    /**
     * Create a detached, initialised DatabasechangelogRecord
     */
    public DatabasechangelogRecord(String ID, String AUTHOR, String FILENAME, LocalDateTime DATEEXECUTED, Integer ORDEREXECUTED, String EXECTYPE, String MD5SUM, String DESCRIPTION, String COMMENTS, String TAG, String LIQUIBASE, String CONTEXTS, String LABELS, String DEPLOYMENT_ID) {
        super(Databasechangelog.DATABASECHANGELOG);

        ID(ID);
        AUTHOR(AUTHOR);
        FILENAME(FILENAME);
        DATEEXECUTED(DATEEXECUTED);
        ORDEREXECUTED(ORDEREXECUTED);
        EXECTYPE(EXECTYPE);
        MD5SUM(MD5SUM);
        DESCRIPTION(DESCRIPTION);
        COMMENTS(COMMENTS);
        TAG(TAG);
        LIQUIBASE(LIQUIBASE);
        CONTEXTS(CONTEXTS);
        LABELS(LABELS);
        DEPLOYMENT_ID(DEPLOYMENT_ID);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DatabasechangelogRecord
     */
    public DatabasechangelogRecord(org.fk.database1.testshop.tables.pojos.Databasechangelog value) {
        super(Databasechangelog.DATABASECHANGELOG);

        if (value != null) {
            ID(value.ID());
            AUTHOR(value.AUTHOR());
            FILENAME(value.FILENAME());
            DATEEXECUTED(value.DATEEXECUTED());
            ORDEREXECUTED(value.ORDEREXECUTED());
            EXECTYPE(value.EXECTYPE());
            MD5SUM(value.MD5SUM());
            DESCRIPTION(value.DESCRIPTION());
            COMMENTS(value.COMMENTS());
            TAG(value.TAG());
            LIQUIBASE(value.LIQUIBASE());
            CONTEXTS(value.CONTEXTS());
            LABELS(value.LABELS());
            DEPLOYMENT_ID(value.DEPLOYMENT_ID());
            resetChangedOnNotNull();
        }
    }
}
