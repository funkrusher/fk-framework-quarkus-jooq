/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.database1.testshop.tables.QrtzBlobTriggers;
import org.fk.database1.testshop.tables.interfaces.IQrtzBlobTriggers;
import org.jooq.Record3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzBlobTriggersRecord extends UpdatableRecordImpl<QrtzBlobTriggersRecord> implements IQrtzBlobTriggers {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop.QRTZ_BLOB_TRIGGERS.SCHED_NAME</code>.
     */
    @Override
    public QrtzBlobTriggersRecord SCHED_NAME(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_BLOB_TRIGGERS.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    @Override
    public String SCHED_NAME() {
        return (String) get(0);
    }

    /**
     * Setter for <code>testshop.QRTZ_BLOB_TRIGGERS.TRIGGER_NAME</code>.
     */
    @Override
    public QrtzBlobTriggersRecord TRIGGER_NAME(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_BLOB_TRIGGERS.TRIGGER_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String TRIGGER_NAME() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testshop.QRTZ_BLOB_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @Override
    public QrtzBlobTriggersRecord TRIGGER_GROUP(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_BLOB_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String TRIGGER_GROUP() {
        return (String) get(2);
    }

    /**
     * Setter for <code>testshop.QRTZ_BLOB_TRIGGERS.BLOB_DATA</code>.
     */
    @Override
    public QrtzBlobTriggersRecord BLOB_DATA(byte[] value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_BLOB_TRIGGERS.BLOB_DATA</code>.
     */
    @Size(max = 65535)
    @Override
    public byte[] BLOB_DATA() {
        return (byte[]) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<String, String, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IQrtzBlobTriggers from) {
        SCHED_NAME(from.SCHED_NAME());
        TRIGGER_NAME(from.TRIGGER_NAME());
        TRIGGER_GROUP(from.TRIGGER_GROUP());
        BLOB_DATA(from.BLOB_DATA());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IQrtzBlobTriggers> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QrtzBlobTriggersRecord
     */
    public QrtzBlobTriggersRecord() {
        super(QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS);
    }

    /**
     * Create a detached, initialised QrtzBlobTriggersRecord
     */
    public QrtzBlobTriggersRecord(String SCHED_NAME, String TRIGGER_NAME, String TRIGGER_GROUP, byte[] BLOB_DATA) {
        super(QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS);

        SCHED_NAME(SCHED_NAME);
        TRIGGER_NAME(TRIGGER_NAME);
        TRIGGER_GROUP(TRIGGER_GROUP);
        BLOB_DATA(BLOB_DATA);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised QrtzBlobTriggersRecord
     */
    public QrtzBlobTriggersRecord(org.fk.database1.testshop.tables.pojos.QrtzBlobTriggers value) {
        super(QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS);

        if (value != null) {
            SCHED_NAME(value.SCHED_NAME());
            TRIGGER_NAME(value.TRIGGER_NAME());
            TRIGGER_GROUP(value.TRIGGER_GROUP());
            BLOB_DATA(value.BLOB_DATA());
            resetChangedOnNotNull();
        }
    }
}
