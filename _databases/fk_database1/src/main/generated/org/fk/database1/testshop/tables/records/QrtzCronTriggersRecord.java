/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.database1.testshop.tables.QrtzCronTriggers;
import org.jooq.Record3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzCronTriggersRecord extends UpdatableRecordImpl<QrtzCronTriggersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop.QRTZ_CRON_TRIGGERS.SCHED_NAME</code>.
     */
    public QrtzCronTriggersRecord setSchedName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_CRON_TRIGGERS.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    public String getSchedName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>testshop.QRTZ_CRON_TRIGGERS.TRIGGER_NAME</code>.
     */
    public QrtzCronTriggersRecord setTriggerName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_CRON_TRIGGERS.TRIGGER_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    public String getTriggerName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testshop.QRTZ_CRON_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public QrtzCronTriggersRecord setTriggerGroup(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_CRON_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    public String getTriggerGroup() {
        return (String) get(2);
    }

    /**
     * Setter for <code>testshop.QRTZ_CRON_TRIGGERS.CRON_EXPRESSION</code>.
     */
    public QrtzCronTriggersRecord setCronExpression(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_CRON_TRIGGERS.CRON_EXPRESSION</code>.
     */
    @NotNull
    @Size(max = 120)
    public String getCronExpression() {
        return (String) get(3);
    }

    /**
     * Setter for <code>testshop.QRTZ_CRON_TRIGGERS.TIME_ZONE_ID</code>.
     */
    public QrtzCronTriggersRecord setTimeZoneId(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_CRON_TRIGGERS.TIME_ZONE_ID</code>.
     */
    @Size(max = 80)
    public String getTimeZoneId() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<String, String, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QrtzCronTriggersRecord
     */
    public QrtzCronTriggersRecord() {
        super(QrtzCronTriggers.QRTZ_CRON_TRIGGERS);
    }

    /**
     * Create a detached, initialised QrtzCronTriggersRecord
     */
    public QrtzCronTriggersRecord(String schedName, String triggerName, String triggerGroup, String cronExpression, String timeZoneId) {
        super(QrtzCronTriggers.QRTZ_CRON_TRIGGERS);

        setSchedName(schedName);
        setTriggerName(triggerName);
        setTriggerGroup(triggerGroup);
        setCronExpression(cronExpression);
        setTimeZoneId(timeZoneId);
        resetChangedOnNotNull();
    }
}
