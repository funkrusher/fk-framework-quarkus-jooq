/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.database1.testshop.tables.QrtzFiredTriggers;
import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzFiredTriggersRecord extends UpdatableRecordImpl<QrtzFiredTriggersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_NAME</code>.
     */
    public QrtzFiredTriggersRecord setSchedName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    public String getSchedName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.ENTRY_ID</code>.
     */
    public QrtzFiredTriggersRecord setEntryId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.ENTRY_ID</code>.
     */
    @NotNull
    @Size(max = 95)
    public String getEntryId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_NAME</code>.
     */
    public QrtzFiredTriggersRecord setTriggerName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    public String getTriggerName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public QrtzFiredTriggersRecord setTriggerGroup(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    public String getTriggerGroup() {
        return (String) get(3);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.INSTANCE_NAME</code>.
     */
    public QrtzFiredTriggersRecord setInstanceName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.INSTANCE_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    public String getInstanceName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.FIRED_TIME</code>.
     */
    public QrtzFiredTriggersRecord setFiredTime(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.FIRED_TIME</code>.
     */
    @NotNull
    public Long getFiredTime() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_TIME</code>.
     */
    public QrtzFiredTriggersRecord setSchedTime(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_TIME</code>.
     */
    @NotNull
    public Long getSchedTime() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.PRIORITY</code>.
     */
    public QrtzFiredTriggersRecord setPriority(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.PRIORITY</code>.
     */
    @NotNull
    public Integer getPriority() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.STATE</code>.
     */
    public QrtzFiredTriggersRecord setState(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.STATE</code>.
     */
    @NotNull
    @Size(max = 16)
    public String getState() {
        return (String) get(8);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_NAME</code>.
     */
    public QrtzFiredTriggersRecord setJobName(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_NAME</code>.
     */
    @Size(max = 190)
    public String getJobName() {
        return (String) get(9);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_GROUP</code>.
     */
    public QrtzFiredTriggersRecord setJobGroup(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_GROUP</code>.
     */
    @Size(max = 190)
    public String getJobGroup() {
        return (String) get(10);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.IS_NONCONCURRENT</code>.
     */
    public QrtzFiredTriggersRecord setIsNonconcurrent(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.IS_NONCONCURRENT</code>.
     */
    @Size(max = 1)
    public String getIsNonconcurrent() {
        return (String) get(11);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.REQUESTS_RECOVERY</code>.
     */
    public QrtzFiredTriggersRecord setRequestsRecovery(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.REQUESTS_RECOVERY</code>.
     */
    @Size(max = 1)
    public String getRequestsRecovery() {
        return (String) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QrtzFiredTriggersRecord
     */
    public QrtzFiredTriggersRecord() {
        super(QrtzFiredTriggers.QRTZ_FIRED_TRIGGERS);
    }

    /**
     * Create a detached, initialised QrtzFiredTriggersRecord
     */
    public QrtzFiredTriggersRecord(String schedName, String entryId, String triggerName, String triggerGroup, String instanceName, Long firedTime, Long schedTime, Integer priority, String state, String jobName, String jobGroup, String isNonconcurrent, String requestsRecovery) {
        super(QrtzFiredTriggers.QRTZ_FIRED_TRIGGERS);

        setSchedName(schedName);
        setEntryId(entryId);
        setTriggerName(triggerName);
        setTriggerGroup(triggerGroup);
        setInstanceName(instanceName);
        setFiredTime(firedTime);
        setSchedTime(schedTime);
        setPriority(priority);
        setState(state);
        setJobName(jobName);
        setJobGroup(jobGroup);
        setIsNonconcurrent(isNonconcurrent);
        setRequestsRecovery(requestsRecovery);
        resetChangedOnNotNull();
    }
}
