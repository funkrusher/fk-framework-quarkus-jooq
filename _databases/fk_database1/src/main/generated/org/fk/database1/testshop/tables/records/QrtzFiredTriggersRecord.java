/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.database1.testshop.tables.QrtzFiredTriggers;
import org.fk.database1.testshop.tables.interfaces.IQrtzFiredTriggers;
import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzFiredTriggersRecord extends UpdatableRecordImpl<QrtzFiredTriggersRecord> implements IQrtzFiredTriggers {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_NAME</code>.
     */
    @Override
    public QrtzFiredTriggersRecord SCHED_NAME(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    @Override
    public String SCHED_NAME() {
        return (String) get(0);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.ENTRY_ID</code>.
     */
    @Override
    public QrtzFiredTriggersRecord ENTRY_ID(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.ENTRY_ID</code>.
     */
    @NotNull
    @Size(max = 95)
    @Override
    public String ENTRY_ID() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_NAME</code>.
     */
    @Override
    public QrtzFiredTriggersRecord TRIGGER_NAME(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String TRIGGER_NAME() {
        return (String) get(2);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @Override
    public QrtzFiredTriggersRecord TRIGGER_GROUP(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String TRIGGER_GROUP() {
        return (String) get(3);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.INSTANCE_NAME</code>.
     */
    @Override
    public QrtzFiredTriggersRecord INSTANCE_NAME(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.INSTANCE_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String INSTANCE_NAME() {
        return (String) get(4);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.FIRED_TIME</code>.
     */
    @Override
    public QrtzFiredTriggersRecord FIRED_TIME(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.FIRED_TIME</code>.
     */
    @NotNull
    @Override
    public Long FIRED_TIME() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_TIME</code>.
     */
    @Override
    public QrtzFiredTriggersRecord SCHED_TIME(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_TIME</code>.
     */
    @NotNull
    @Override
    public Long SCHED_TIME() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.PRIORITY</code>.
     */
    @Override
    public QrtzFiredTriggersRecord PRIORITY(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.PRIORITY</code>.
     */
    @NotNull
    @Override
    public Integer PRIORITY() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.STATE</code>.
     */
    @Override
    public QrtzFiredTriggersRecord STATE(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.STATE</code>.
     */
    @NotNull
    @Size(max = 16)
    @Override
    public String STATE() {
        return (String) get(8);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_NAME</code>.
     */
    @Override
    public QrtzFiredTriggersRecord JOB_NAME(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_NAME</code>.
     */
    @Size(max = 190)
    @Override
    public String JOB_NAME() {
        return (String) get(9);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_GROUP</code>.
     */
    @Override
    public QrtzFiredTriggersRecord JOB_GROUP(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_GROUP</code>.
     */
    @Size(max = 190)
    @Override
    public String JOB_GROUP() {
        return (String) get(10);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.IS_NONCONCURRENT</code>.
     */
    @Override
    public QrtzFiredTriggersRecord IS_NONCONCURRENT(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.IS_NONCONCURRENT</code>.
     */
    @Size(max = 1)
    @Override
    public String IS_NONCONCURRENT() {
        return (String) get(11);
    }

    /**
     * Setter for <code>testshop.QRTZ_FIRED_TRIGGERS.REQUESTS_RECOVERY</code>.
     */
    @Override
    public QrtzFiredTriggersRecord REQUESTS_RECOVERY(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_FIRED_TRIGGERS.REQUESTS_RECOVERY</code>.
     */
    @Size(max = 1)
    @Override
    public String REQUESTS_RECOVERY() {
        return (String) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IQrtzFiredTriggers from) {
        SCHED_NAME(from.SCHED_NAME());
        ENTRY_ID(from.ENTRY_ID());
        TRIGGER_NAME(from.TRIGGER_NAME());
        TRIGGER_GROUP(from.TRIGGER_GROUP());
        INSTANCE_NAME(from.INSTANCE_NAME());
        FIRED_TIME(from.FIRED_TIME());
        SCHED_TIME(from.SCHED_TIME());
        PRIORITY(from.PRIORITY());
        STATE(from.STATE());
        JOB_NAME(from.JOB_NAME());
        JOB_GROUP(from.JOB_GROUP());
        IS_NONCONCURRENT(from.IS_NONCONCURRENT());
        REQUESTS_RECOVERY(from.REQUESTS_RECOVERY());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IQrtzFiredTriggers> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QrtzFiredTriggersRecord
     */
    public QrtzFiredTriggersRecord() {
        super(QrtzFiredTriggers.QRTZ_FIRED_TRIGGERS);
    }

    /**
     * Create a detached, initialised QrtzFiredTriggersRecord
     */
    public QrtzFiredTriggersRecord(String SCHED_NAME, String ENTRY_ID, String TRIGGER_NAME, String TRIGGER_GROUP, String INSTANCE_NAME, Long FIRED_TIME, Long SCHED_TIME, Integer PRIORITY, String STATE, String JOB_NAME, String JOB_GROUP, String IS_NONCONCURRENT, String REQUESTS_RECOVERY) {
        super(QrtzFiredTriggers.QRTZ_FIRED_TRIGGERS);

        SCHED_NAME(SCHED_NAME);
        ENTRY_ID(ENTRY_ID);
        TRIGGER_NAME(TRIGGER_NAME);
        TRIGGER_GROUP(TRIGGER_GROUP);
        INSTANCE_NAME(INSTANCE_NAME);
        FIRED_TIME(FIRED_TIME);
        SCHED_TIME(SCHED_TIME);
        PRIORITY(PRIORITY);
        STATE(STATE);
        JOB_NAME(JOB_NAME);
        JOB_GROUP(JOB_GROUP);
        IS_NONCONCURRENT(IS_NONCONCURRENT);
        REQUESTS_RECOVERY(REQUESTS_RECOVERY);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised QrtzFiredTriggersRecord
     */
    public QrtzFiredTriggersRecord(org.fk.database1.testshop.tables.pojos.QrtzFiredTriggers value) {
        super(QrtzFiredTriggers.QRTZ_FIRED_TRIGGERS);

        if (value != null) {
            SCHED_NAME(value.SCHED_NAME());
            ENTRY_ID(value.ENTRY_ID());
            TRIGGER_NAME(value.TRIGGER_NAME());
            TRIGGER_GROUP(value.TRIGGER_GROUP());
            INSTANCE_NAME(value.INSTANCE_NAME());
            FIRED_TIME(value.FIRED_TIME());
            SCHED_TIME(value.SCHED_TIME());
            PRIORITY(value.PRIORITY());
            STATE(value.STATE());
            JOB_NAME(value.JOB_NAME());
            JOB_GROUP(value.JOB_GROUP());
            IS_NONCONCURRENT(value.IS_NONCONCURRENT());
            REQUESTS_RECOVERY(value.REQUESTS_RECOVERY());
            resetChangedOnNotNull();
        }
    }
}
