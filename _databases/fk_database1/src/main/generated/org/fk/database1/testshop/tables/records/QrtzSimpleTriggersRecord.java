/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.database1.testshop.tables.QrtzSimpleTriggers;
import org.fk.database1.testshop.tables.interfaces.IQrtzSimpleTriggers;
import org.jooq.Record3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzSimpleTriggersRecord extends UpdatableRecordImpl<QrtzSimpleTriggersRecord> implements IQrtzSimpleTriggers {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.SCHED_NAME</code>.
     */
    @Override
    public QrtzSimpleTriggersRecord setSCHED_NAME(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    @Override
    public String getSCHED_NAME() {
        return (String) get(0);
    }

    /**
     * Setter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.TRIGGER_NAME</code>.
     */
    @Override
    public QrtzSimpleTriggersRecord setTRIGGER_NAME(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.TRIGGER_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getTRIGGER_NAME() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @Override
    public QrtzSimpleTriggersRecord setTRIGGER_GROUP(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getTRIGGER_GROUP() {
        return (String) get(2);
    }

    /**
     * Setter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.REPEAT_COUNT</code>.
     */
    @Override
    public QrtzSimpleTriggersRecord setREPEAT_COUNT(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.REPEAT_COUNT</code>.
     */
    @NotNull
    @Override
    public Long getREPEAT_COUNT() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.REPEAT_INTERVAL</code>.
     */
    @Override
    public QrtzSimpleTriggersRecord setREPEAT_INTERVAL(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.REPEAT_INTERVAL</code>.
     */
    @NotNull
    @Override
    public Long getREPEAT_INTERVAL() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.TIMES_TRIGGERED</code>.
     */
    @Override
    public QrtzSimpleTriggersRecord setTIMES_TRIGGERED(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.TIMES_TRIGGERED</code>.
     */
    @NotNull
    @Override
    public Long getTIMES_TRIGGERED() {
        return (Long) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<String, String, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IQrtzSimpleTriggers from) {
        setSCHED_NAME(from.getSCHED_NAME());
        setTRIGGER_NAME(from.getTRIGGER_NAME());
        setTRIGGER_GROUP(from.getTRIGGER_GROUP());
        setREPEAT_COUNT(from.getREPEAT_COUNT());
        setREPEAT_INTERVAL(from.getREPEAT_INTERVAL());
        setTIMES_TRIGGERED(from.getTIMES_TRIGGERED());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IQrtzSimpleTriggers> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QrtzSimpleTriggersRecord
     */
    public QrtzSimpleTriggersRecord() {
        super(QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS);
    }

    /**
     * Create a detached, initialised QrtzSimpleTriggersRecord
     */
    public QrtzSimpleTriggersRecord(String SCHED_NAME, String TRIGGER_NAME, String TRIGGER_GROUP, Long REPEAT_COUNT, Long REPEAT_INTERVAL, Long TIMES_TRIGGERED) {
        super(QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS);

        setSCHED_NAME(SCHED_NAME);
        setTRIGGER_NAME(TRIGGER_NAME);
        setTRIGGER_GROUP(TRIGGER_GROUP);
        setREPEAT_COUNT(REPEAT_COUNT);
        setREPEAT_INTERVAL(REPEAT_INTERVAL);
        setTIMES_TRIGGERED(TIMES_TRIGGERED);
        resetChangedOnNotNull();
    }
}
