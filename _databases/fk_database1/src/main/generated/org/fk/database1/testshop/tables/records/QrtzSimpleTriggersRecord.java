/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.database1.testshop.tables.QrtzSimpleTriggers;
import org.jooq.Record3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzSimpleTriggersRecord extends UpdatableRecordImpl<QrtzSimpleTriggersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.SCHED_NAME</code>.
     */
    public QrtzSimpleTriggersRecord setSchedName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    public String getSchedName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.TRIGGER_NAME</code>.
     */
    public QrtzSimpleTriggersRecord setTriggerName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.TRIGGER_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    public String getTriggerName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public QrtzSimpleTriggersRecord setTriggerGroup(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    public String getTriggerGroup() {
        return (String) get(2);
    }

    /**
     * Setter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.REPEAT_COUNT</code>.
     */
    public QrtzSimpleTriggersRecord setRepeatCount(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.REPEAT_COUNT</code>.
     */
    @NotNull
    public Long getRepeatCount() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.REPEAT_INTERVAL</code>.
     */
    public QrtzSimpleTriggersRecord setRepeatInterval(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.REPEAT_INTERVAL</code>.
     */
    @NotNull
    public Long getRepeatInterval() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.TIMES_TRIGGERED</code>.
     */
    public QrtzSimpleTriggersRecord setTimesTriggered(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_SIMPLE_TRIGGERS.TIMES_TRIGGERED</code>.
     */
    @NotNull
    public Long getTimesTriggered() {
        return (Long) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<String, String, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QrtzSimpleTriggersRecord
     */
    public QrtzSimpleTriggersRecord() {
        super(QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS);
    }

    /**
     * Create a detached, initialised QrtzSimpleTriggersRecord
     */
    public QrtzSimpleTriggersRecord(String schedName, String triggerName, String triggerGroup, Long repeatCount, Long repeatInterval, Long timesTriggered) {
        super(QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS);

        setSchedName(schedName);
        setTriggerName(triggerName);
        setTriggerGroup(triggerGroup);
        setRepeatCount(repeatCount);
        setRepeatInterval(repeatInterval);
        setTimesTriggered(timesTriggered);
        resetChangedOnNotNull();
    }
}
