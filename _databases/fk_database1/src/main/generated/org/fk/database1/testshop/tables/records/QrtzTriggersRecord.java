/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.database1.testshop.tables.QrtzTriggers;
import org.jooq.Record3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzTriggersRecord extends UpdatableRecordImpl<QrtzTriggersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.SCHED_NAME</code>.
     */
    public QrtzTriggersRecord setSchedName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    public String getSchedName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_NAME</code>.
     */
    public QrtzTriggersRecord setTriggerName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    public String getTriggerName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public QrtzTriggersRecord setTriggerGroup(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    public String getTriggerGroup() {
        return (String) get(2);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.JOB_NAME</code>.
     */
    public QrtzTriggersRecord setJobName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.JOB_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    public String getJobName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.JOB_GROUP</code>.
     */
    public QrtzTriggersRecord setJobGroup(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.JOB_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    public String getJobGroup() {
        return (String) get(4);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.DESCRIPTION</code>.
     */
    public QrtzTriggersRecord setDescription(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.DESCRIPTION</code>.
     */
    @Size(max = 250)
    public String getDescription() {
        return (String) get(5);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.NEXT_FIRE_TIME</code>.
     */
    public QrtzTriggersRecord setNextFireTime(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.NEXT_FIRE_TIME</code>.
     */
    public Long getNextFireTime() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.PREV_FIRE_TIME</code>.
     */
    public QrtzTriggersRecord setPrevFireTime(Long value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.PREV_FIRE_TIME</code>.
     */
    public Long getPrevFireTime() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.PRIORITY</code>.
     */
    public QrtzTriggersRecord setPriority(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.PRIORITY</code>.
     */
    public Integer getPriority() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_STATE</code>.
     */
    public QrtzTriggersRecord setTriggerState(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_STATE</code>.
     */
    @NotNull
    @Size(max = 16)
    public String getTriggerState() {
        return (String) get(9);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_TYPE</code>.
     */
    public QrtzTriggersRecord setTriggerType(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_TYPE</code>.
     */
    @NotNull
    @Size(max = 8)
    public String getTriggerType() {
        return (String) get(10);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.START_TIME</code>.
     */
    public QrtzTriggersRecord setStartTime(Long value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.START_TIME</code>.
     */
    @NotNull
    public Long getStartTime() {
        return (Long) get(11);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.END_TIME</code>.
     */
    public QrtzTriggersRecord setEndTime(Long value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.END_TIME</code>.
     */
    public Long getEndTime() {
        return (Long) get(12);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.CALENDAR_NAME</code>.
     */
    public QrtzTriggersRecord setCalendarName(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.CALENDAR_NAME</code>.
     */
    @Size(max = 190)
    public String getCalendarName() {
        return (String) get(13);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.MISFIRE_INSTR</code>.
     */
    public QrtzTriggersRecord setMisfireInstr(Short value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.MISFIRE_INSTR</code>.
     */
    public Short getMisfireInstr() {
        return (Short) get(14);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.JOB_DATA</code>.
     */
    public QrtzTriggersRecord setJobData(byte[] value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.JOB_DATA</code>.
     */
    @Size(max = 65535)
    public byte[] getJobData() {
        return (byte[]) get(15);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<String, String, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QrtzTriggersRecord
     */
    public QrtzTriggersRecord() {
        super(QrtzTriggers.QRTZ_TRIGGERS);
    }

    /**
     * Create a detached, initialised QrtzTriggersRecord
     */
    public QrtzTriggersRecord(String schedName, String triggerName, String triggerGroup, String jobName, String jobGroup, String description, Long nextFireTime, Long prevFireTime, Integer priority, String triggerState, String triggerType, Long startTime, Long endTime, String calendarName, Short misfireInstr, byte[] jobData) {
        super(QrtzTriggers.QRTZ_TRIGGERS);

        setSchedName(schedName);
        setTriggerName(triggerName);
        setTriggerGroup(triggerGroup);
        setJobName(jobName);
        setJobGroup(jobGroup);
        setDescription(description);
        setNextFireTime(nextFireTime);
        setPrevFireTime(prevFireTime);
        setPriority(priority);
        setTriggerState(triggerState);
        setTriggerType(triggerType);
        setStartTime(startTime);
        setEndTime(endTime);
        setCalendarName(calendarName);
        setMisfireInstr(misfireInstr);
        setJobData(jobData);
        resetChangedOnNotNull();
    }
}
