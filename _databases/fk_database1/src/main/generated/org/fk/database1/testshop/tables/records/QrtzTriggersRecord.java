/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.database1.testshop.tables.QrtzTriggers;
import org.fk.database1.testshop.tables.interfaces.IQrtzTriggers;
import org.jooq.Record3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzTriggersRecord extends UpdatableRecordImpl<QrtzTriggersRecord> implements IQrtzTriggers {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.SCHED_NAME</code>.
     */
    @Override
    public QrtzTriggersRecord SCHED_NAME(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    @Override
    public String SCHED_NAME() {
        return (String) get(0);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_NAME</code>.
     */
    @Override
    public QrtzTriggersRecord TRIGGER_NAME(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String TRIGGER_NAME() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @Override
    public QrtzTriggersRecord TRIGGER_GROUP(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String TRIGGER_GROUP() {
        return (String) get(2);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.JOB_NAME</code>.
     */
    @Override
    public QrtzTriggersRecord JOB_NAME(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.JOB_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String JOB_NAME() {
        return (String) get(3);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.JOB_GROUP</code>.
     */
    @Override
    public QrtzTriggersRecord JOB_GROUP(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.JOB_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String JOB_GROUP() {
        return (String) get(4);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.DESCRIPTION</code>.
     */
    @Override
    public QrtzTriggersRecord DESCRIPTION(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.DESCRIPTION</code>.
     */
    @Size(max = 250)
    @Override
    public String DESCRIPTION() {
        return (String) get(5);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.NEXT_FIRE_TIME</code>.
     */
    @Override
    public QrtzTriggersRecord NEXT_FIRE_TIME(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.NEXT_FIRE_TIME</code>.
     */
    @Override
    public Long NEXT_FIRE_TIME() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.PREV_FIRE_TIME</code>.
     */
    @Override
    public QrtzTriggersRecord PREV_FIRE_TIME(Long value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.PREV_FIRE_TIME</code>.
     */
    @Override
    public Long PREV_FIRE_TIME() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.PRIORITY</code>.
     */
    @Override
    public QrtzTriggersRecord PRIORITY(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.PRIORITY</code>.
     */
    @Override
    public Integer PRIORITY() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_STATE</code>.
     */
    @Override
    public QrtzTriggersRecord TRIGGER_STATE(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_STATE</code>.
     */
    @NotNull
    @Size(max = 16)
    @Override
    public String TRIGGER_STATE() {
        return (String) get(9);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_TYPE</code>.
     */
    @Override
    public QrtzTriggersRecord TRIGGER_TYPE(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_TYPE</code>.
     */
    @NotNull
    @Size(max = 8)
    @Override
    public String TRIGGER_TYPE() {
        return (String) get(10);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.START_TIME</code>.
     */
    @Override
    public QrtzTriggersRecord START_TIME(Long value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.START_TIME</code>.
     */
    @NotNull
    @Override
    public Long START_TIME() {
        return (Long) get(11);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.END_TIME</code>.
     */
    @Override
    public QrtzTriggersRecord END_TIME(Long value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.END_TIME</code>.
     */
    @Override
    public Long END_TIME() {
        return (Long) get(12);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.CALENDAR_NAME</code>.
     */
    @Override
    public QrtzTriggersRecord CALENDAR_NAME(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.CALENDAR_NAME</code>.
     */
    @Size(max = 190)
    @Override
    public String CALENDAR_NAME() {
        return (String) get(13);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.MISFIRE_INSTR</code>.
     */
    @Override
    public QrtzTriggersRecord MISFIRE_INSTR(Short value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.MISFIRE_INSTR</code>.
     */
    @Override
    public Short MISFIRE_INSTR() {
        return (Short) get(14);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.JOB_DATA</code>.
     */
    @Override
    public QrtzTriggersRecord JOB_DATA(byte[] value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.JOB_DATA</code>.
     */
    @Size(max = 65535)
    @Override
    public byte[] JOB_DATA() {
        return (byte[]) get(15);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<String, String, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IQrtzTriggers from) {
        SCHED_NAME(from.SCHED_NAME());
        TRIGGER_NAME(from.TRIGGER_NAME());
        TRIGGER_GROUP(from.TRIGGER_GROUP());
        JOB_NAME(from.JOB_NAME());
        JOB_GROUP(from.JOB_GROUP());
        DESCRIPTION(from.DESCRIPTION());
        NEXT_FIRE_TIME(from.NEXT_FIRE_TIME());
        PREV_FIRE_TIME(from.PREV_FIRE_TIME());
        PRIORITY(from.PRIORITY());
        TRIGGER_STATE(from.TRIGGER_STATE());
        TRIGGER_TYPE(from.TRIGGER_TYPE());
        START_TIME(from.START_TIME());
        END_TIME(from.END_TIME());
        CALENDAR_NAME(from.CALENDAR_NAME());
        MISFIRE_INSTR(from.MISFIRE_INSTR());
        JOB_DATA(from.JOB_DATA());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IQrtzTriggers> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QrtzTriggersRecord
     */
    public QrtzTriggersRecord() {
        super(QrtzTriggers.QRTZ_TRIGGERS);
    }

    /**
     * Create a detached, initialised QrtzTriggersRecord
     */
    public QrtzTriggersRecord(String SCHED_NAME, String TRIGGER_NAME, String TRIGGER_GROUP, String JOB_NAME, String JOB_GROUP, String DESCRIPTION, Long NEXT_FIRE_TIME, Long PREV_FIRE_TIME, Integer PRIORITY, String TRIGGER_STATE, String TRIGGER_TYPE, Long START_TIME, Long END_TIME, String CALENDAR_NAME, Short MISFIRE_INSTR, byte[] JOB_DATA) {
        super(QrtzTriggers.QRTZ_TRIGGERS);

        SCHED_NAME(SCHED_NAME);
        TRIGGER_NAME(TRIGGER_NAME);
        TRIGGER_GROUP(TRIGGER_GROUP);
        JOB_NAME(JOB_NAME);
        JOB_GROUP(JOB_GROUP);
        DESCRIPTION(DESCRIPTION);
        NEXT_FIRE_TIME(NEXT_FIRE_TIME);
        PREV_FIRE_TIME(PREV_FIRE_TIME);
        PRIORITY(PRIORITY);
        TRIGGER_STATE(TRIGGER_STATE);
        TRIGGER_TYPE(TRIGGER_TYPE);
        START_TIME(START_TIME);
        END_TIME(END_TIME);
        CALENDAR_NAME(CALENDAR_NAME);
        MISFIRE_INSTR(MISFIRE_INSTR);
        JOB_DATA(JOB_DATA);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised QrtzTriggersRecord
     */
    public QrtzTriggersRecord(org.fk.database1.testshop.tables.pojos.QrtzTriggers value) {
        super(QrtzTriggers.QRTZ_TRIGGERS);

        if (value != null) {
            SCHED_NAME(value.SCHED_NAME());
            TRIGGER_NAME(value.TRIGGER_NAME());
            TRIGGER_GROUP(value.TRIGGER_GROUP());
            JOB_NAME(value.JOB_NAME());
            JOB_GROUP(value.JOB_GROUP());
            DESCRIPTION(value.DESCRIPTION());
            NEXT_FIRE_TIME(value.NEXT_FIRE_TIME());
            PREV_FIRE_TIME(value.PREV_FIRE_TIME());
            PRIORITY(value.PRIORITY());
            TRIGGER_STATE(value.TRIGGER_STATE());
            TRIGGER_TYPE(value.TRIGGER_TYPE());
            START_TIME(value.START_TIME());
            END_TIME(value.END_TIME());
            CALENDAR_NAME(value.CALENDAR_NAME());
            MISFIRE_INSTR(value.MISFIRE_INSTR());
            JOB_DATA(value.JOB_DATA());
            resetChangedOnNotNull();
        }
    }
}
