/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.database1.testshop.tables.QrtzTriggers;
import org.fk.database1.testshop.tables.interfaces.IQrtzTriggers;
import org.jooq.Record3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzTriggersRecord extends UpdatableRecordImpl<QrtzTriggersRecord> implements IQrtzTriggers {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.SCHED_NAME</code>.
     */
    @Override
    public QrtzTriggersRecord setSCHED_NAME(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    @Override
    public String getSCHED_NAME() {
        return (String) get(0);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_NAME</code>.
     */
    @Override
    public QrtzTriggersRecord setTRIGGER_NAME(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getTRIGGER_NAME() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @Override
    public QrtzTriggersRecord setTRIGGER_GROUP(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getTRIGGER_GROUP() {
        return (String) get(2);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.JOB_NAME</code>.
     */
    @Override
    public QrtzTriggersRecord setJOB_NAME(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.JOB_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getJOB_NAME() {
        return (String) get(3);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.JOB_GROUP</code>.
     */
    @Override
    public QrtzTriggersRecord setJOB_GROUP(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.JOB_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getJOB_GROUP() {
        return (String) get(4);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.DESCRIPTION</code>.
     */
    @Override
    public QrtzTriggersRecord setDESCRIPTION(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.DESCRIPTION</code>.
     */
    @Size(max = 250)
    @Override
    public String getDESCRIPTION() {
        return (String) get(5);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.NEXT_FIRE_TIME</code>.
     */
    @Override
    public QrtzTriggersRecord setNEXT_FIRE_TIME(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.NEXT_FIRE_TIME</code>.
     */
    @Override
    public Long getNEXT_FIRE_TIME() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.PREV_FIRE_TIME</code>.
     */
    @Override
    public QrtzTriggersRecord setPREV_FIRE_TIME(Long value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.PREV_FIRE_TIME</code>.
     */
    @Override
    public Long getPREV_FIRE_TIME() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.PRIORITY</code>.
     */
    @Override
    public QrtzTriggersRecord setPRIORITY(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.PRIORITY</code>.
     */
    @Override
    public Integer getPRIORITY() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_STATE</code>.
     */
    @Override
    public QrtzTriggersRecord setTRIGGER_STATE(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_STATE</code>.
     */
    @NotNull
    @Size(max = 16)
    @Override
    public String getTRIGGER_STATE() {
        return (String) get(9);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_TYPE</code>.
     */
    @Override
    public QrtzTriggersRecord setTRIGGER_TYPE(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.TRIGGER_TYPE</code>.
     */
    @NotNull
    @Size(max = 8)
    @Override
    public String getTRIGGER_TYPE() {
        return (String) get(10);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.START_TIME</code>.
     */
    @Override
    public QrtzTriggersRecord setSTART_TIME(Long value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.START_TIME</code>.
     */
    @NotNull
    @Override
    public Long getSTART_TIME() {
        return (Long) get(11);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.END_TIME</code>.
     */
    @Override
    public QrtzTriggersRecord setEND_TIME(Long value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.END_TIME</code>.
     */
    @Override
    public Long getEND_TIME() {
        return (Long) get(12);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.CALENDAR_NAME</code>.
     */
    @Override
    public QrtzTriggersRecord setCALENDAR_NAME(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.CALENDAR_NAME</code>.
     */
    @Size(max = 190)
    @Override
    public String getCALENDAR_NAME() {
        return (String) get(13);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.MISFIRE_INSTR</code>.
     */
    @Override
    public QrtzTriggersRecord setMISFIRE_INSTR(Short value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.MISFIRE_INSTR</code>.
     */
    @Override
    public Short getMISFIRE_INSTR() {
        return (Short) get(14);
    }

    /**
     * Setter for <code>testshop.QRTZ_TRIGGERS.JOB_DATA</code>.
     */
    @Override
    public QrtzTriggersRecord setJOB_DATA(byte[] value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>testshop.QRTZ_TRIGGERS.JOB_DATA</code>.
     */
    @Size(max = 65535)
    @Override
    public byte[] getJOB_DATA() {
        return (byte[]) get(15);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<String, String, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IQrtzTriggers from) {
        setSCHED_NAME(from.getSCHED_NAME());
        setTRIGGER_NAME(from.getTRIGGER_NAME());
        setTRIGGER_GROUP(from.getTRIGGER_GROUP());
        setJOB_NAME(from.getJOB_NAME());
        setJOB_GROUP(from.getJOB_GROUP());
        setDESCRIPTION(from.getDESCRIPTION());
        setNEXT_FIRE_TIME(from.getNEXT_FIRE_TIME());
        setPREV_FIRE_TIME(from.getPREV_FIRE_TIME());
        setPRIORITY(from.getPRIORITY());
        setTRIGGER_STATE(from.getTRIGGER_STATE());
        setTRIGGER_TYPE(from.getTRIGGER_TYPE());
        setSTART_TIME(from.getSTART_TIME());
        setEND_TIME(from.getEND_TIME());
        setCALENDAR_NAME(from.getCALENDAR_NAME());
        setMISFIRE_INSTR(from.getMISFIRE_INSTR());
        setJOB_DATA(from.getJOB_DATA());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IQrtzTriggers> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QrtzTriggersRecord
     */
    public QrtzTriggersRecord() {
        super(QrtzTriggers.QRTZ_TRIGGERS);
    }

    /**
     * Create a detached, initialised QrtzTriggersRecord
     */
    public QrtzTriggersRecord(String SCHED_NAME, String TRIGGER_NAME, String TRIGGER_GROUP, String JOB_NAME, String JOB_GROUP, String DESCRIPTION, Long NEXT_FIRE_TIME, Long PREV_FIRE_TIME, Integer PRIORITY, String TRIGGER_STATE, String TRIGGER_TYPE, Long START_TIME, Long END_TIME, String CALENDAR_NAME, Short MISFIRE_INSTR, byte[] JOB_DATA) {
        super(QrtzTriggers.QRTZ_TRIGGERS);

        setSCHED_NAME(SCHED_NAME);
        setTRIGGER_NAME(TRIGGER_NAME);
        setTRIGGER_GROUP(TRIGGER_GROUP);
        setJOB_NAME(JOB_NAME);
        setJOB_GROUP(JOB_GROUP);
        setDESCRIPTION(DESCRIPTION);
        setNEXT_FIRE_TIME(NEXT_FIRE_TIME);
        setPREV_FIRE_TIME(PREV_FIRE_TIME);
        setPRIORITY(PRIORITY);
        setTRIGGER_STATE(TRIGGER_STATE);
        setTRIGGER_TYPE(TRIGGER_TYPE);
        setSTART_TIME(START_TIME);
        setEND_TIME(END_TIME);
        setCALENDAR_NAME(CALENDAR_NAME);
        setMISFIRE_INSTR(MISFIRE_INSTR);
        setJOB_DATA(JOB_DATA);
        resetChangedOnNotNull();
    }
}
