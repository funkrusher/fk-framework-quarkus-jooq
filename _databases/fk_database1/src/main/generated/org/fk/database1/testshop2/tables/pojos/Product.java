/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop2.tables.pojos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.fk.database1.testshop2.tables.interfaces.IProduct;


/**
 * Client-specific Products
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Product implements IProduct {

    private static final long serialVersionUID = 1L;

    private Long productId;
    private Integer clientId;
    private BigDecimal price;
    private String typeId;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    private Boolean deleted;
    private Integer creatorId;

    public Product() {}

    public Product(IProduct value) {
        this.productId = value.ProductId();
        this.clientId = value.ClientId();
        this.price = value.Price();
        this.typeId = value.TypeId();
        this.createdAt = value.CreatedAt();
        this.updatedAt = value.UpdatedAt();
        this.deleted = value.Deleted();
        this.creatorId = value.CreatorId();
    }

    public Product(
        Long productId,
        Integer clientId,
        BigDecimal price,
        String typeId,
        LocalDateTime createdAt,
        LocalDateTime updatedAt,
        Boolean deleted,
        Integer creatorId
    ) {
        this.productId = productId;
        this.clientId = clientId;
        this.price = price;
        this.typeId = typeId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.deleted = deleted;
        this.creatorId = creatorId;
    }

    /**
     * Getter for <code>testshop2.product.productId</code>. productId
     */
    @Override
    public Long ProductId() {
        return this.productId;
    }

    /**
     * Setter for <code>testshop2.product.productId</code>. productId
     */
    @Override
    public Product ProductId(Long productId) {
        this.productId = productId;
        return this;
    }

    /**
     * Getter for <code>testshop2.product.clientId</code>. clientId
     */
    @NotNull
    @Override
    public Integer ClientId() {
        return this.clientId;
    }

    /**
     * Setter for <code>testshop2.product.clientId</code>. clientId
     */
    @Override
    public Product ClientId(Integer clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Getter for <code>testshop2.product.price</code>. price of the product in
     * Euro
     */
    @NotNull
    @Override
    public BigDecimal Price() {
        return this.price;
    }

    /**
     * Setter for <code>testshop2.product.price</code>. price of the product in
     * Euro
     */
    @Override
    public Product Price(BigDecimal price) {
        this.price = price;
        return this;
    }

    /**
     * Getter for <code>testshop2.product.typeId</code>. typeId, enumeration -
     * one of: books,...
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String TypeId() {
        return this.typeId;
    }

    /**
     * Setter for <code>testshop2.product.typeId</code>. typeId, enumeration -
     * one of: books,...
     */
    @Override
    public Product TypeId(String typeId) {
        this.typeId = typeId;
        return this;
    }

    /**
     * Getter for <code>testshop2.product.createdAt</code>.
     */
    @Override
    public LocalDateTime CreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>testshop2.product.createdAt</code>.
     */
    @Override
    public Product CreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>testshop2.product.updatedAt</code>.
     */
    @Override
    public LocalDateTime UpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>testshop2.product.updatedAt</code>.
     */
    @Override
    public Product UpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>testshop2.product.deleted</code>. if this product is
     * marked as deleted
     */
    @Override
    public Boolean Deleted() {
        return this.deleted;
    }

    /**
     * Setter for <code>testshop2.product.deleted</code>. if this product is
     * marked as deleted
     */
    @Override
    public Product Deleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }

    /**
     * Getter for <code>testshop2.product.creatorId</code>.
     */
    @Override
    public Integer CreatorId() {
        return this.creatorId;
    }

    /**
     * Setter for <code>testshop2.product.creatorId</code>.
     */
    @Override
    public Product CreatorId(Integer creatorId) {
        this.creatorId = creatorId;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Product (");

        sb.append(productId);
        sb.append(", ").append(clientId);
        sb.append(", ").append(price);
        sb.append(", ").append(typeId);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(deleted);
        sb.append(", ").append(creatorId);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IProduct from) {
        ProductId(from.ProductId());
        ClientId(from.ClientId());
        Price(from.Price());
        TypeId(from.TypeId());
        CreatedAt(from.CreatedAt());
        UpdatedAt(from.UpdatedAt());
        Deleted(from.Deleted());
        CreatorId(from.CreatorId());
    }

    @Override
    public <E extends IProduct> E into(E into) {
        into.from(this);
        return into;
    }
}
