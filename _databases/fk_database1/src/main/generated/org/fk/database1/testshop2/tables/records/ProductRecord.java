/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop2.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.fk.database1.testshop2.tables.Product;
import org.fk.database1.testshop2.tables.interfaces.IProduct;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Client-specific Products
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductRecord extends UpdatableRecordImpl<ProductRecord> implements IProduct {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop2.product.productId</code>. productId
     */
    @Override
    public ProductRecord ProductId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.productId</code>. productId
     */
    @Override
    public Long ProductId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>testshop2.product.clientId</code>. clientId
     */
    @Override
    public ProductRecord ClientId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.clientId</code>. clientId
     */
    @NotNull
    @Override
    public Integer ClientId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>testshop2.product.price</code>. price of the product in
     * Euro
     */
    @Override
    public ProductRecord Price(BigDecimal value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.price</code>. price of the product in
     * Euro
     */
    @NotNull
    @Override
    public BigDecimal Price() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>testshop2.product.typeId</code>. typeId, enumeration -
     * one of: books,...
     */
    @Override
    public ProductRecord TypeId(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.typeId</code>. typeId, enumeration -
     * one of: books,...
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String TypeId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>testshop2.product.createdAt</code>.
     */
    @Override
    public ProductRecord CreatedAt(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.createdAt</code>.
     */
    @Override
    public LocalDateTime CreatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>testshop2.product.updatedAt</code>.
     */
    @Override
    public ProductRecord UpdatedAt(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.updatedAt</code>.
     */
    @Override
    public LocalDateTime UpdatedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>testshop2.product.deleted</code>. if this product is
     * marked as deleted
     */
    @Override
    public ProductRecord Deleted(Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.deleted</code>. if this product is
     * marked as deleted
     */
    @Override
    public Boolean Deleted() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>testshop2.product.creatorId</code>.
     */
    @Override
    public ProductRecord CreatorId(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.creatorId</code>.
     */
    @Override
    public Integer CreatorId() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IProduct from) {
        ProductId(from.ProductId());
        ClientId(from.ClientId());
        Price(from.Price());
        TypeId(from.TypeId());
        CreatedAt(from.CreatedAt());
        UpdatedAt(from.UpdatedAt());
        Deleted(from.Deleted());
        CreatorId(from.CreatorId());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IProduct> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProductRecord
     */
    public ProductRecord() {
        super(Product.PRODUCT);
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    public ProductRecord(Long productId, Integer clientId, BigDecimal price, String typeId, LocalDateTime createdAt, LocalDateTime updatedAt, Boolean deleted, Integer creatorId) {
        super(Product.PRODUCT);

        ProductId(productId);
        ClientId(clientId);
        Price(price);
        TypeId(typeId);
        CreatedAt(createdAt);
        UpdatedAt(updatedAt);
        Deleted(deleted);
        CreatorId(creatorId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    public ProductRecord(org.fk.database1.testshop2.tables.pojos.Product value) {
        super(Product.PRODUCT);

        if (value != null) {
            ProductId(value.ProductId());
            ClientId(value.ClientId());
            Price(value.Price());
            TypeId(value.TypeId());
            CreatedAt(value.CreatedAt());
            UpdatedAt(value.UpdatedAt());
            Deleted(value.Deleted());
            CreatorId(value.CreatorId());
            resetChangedOnNotNull();
        }
    }
}
