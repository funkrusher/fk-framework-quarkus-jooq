/*
 * This file is generated by jOOQ.
 */
package org.fk.database1.testshop2.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.fk.database1.testshop2.tables.Product;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Client-specific Products
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductRecord extends UpdatableRecordImpl<ProductRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop2.product.productId</code>. productId
     */
    public ProductRecord setProductid(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.productId</code>. productId
     */
    public Long getProductid() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>testshop2.product.clientId</code>. clientId
     */
    public ProductRecord setClientid(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.clientId</code>. clientId
     */
    @NotNull
    public Integer getClientid() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>testshop2.product.price</code>. price of the product in
     * Euro
     */
    public ProductRecord setPrice(BigDecimal value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.price</code>. price of the product in
     * Euro
     */
    @NotNull
    public BigDecimal getPrice() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>testshop2.product.typeId</code>. typeId, enumeration -
     * one of: books,...
     */
    public ProductRecord setTypeid(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.typeId</code>. typeId, enumeration -
     * one of: books,...
     */
    @NotNull
    @Size(max = 255)
    public String getTypeid() {
        return (String) get(3);
    }

    /**
     * Setter for <code>testshop2.product.createdAt</code>.
     */
    public ProductRecord setCreatedat(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.createdAt</code>.
     */
    public LocalDateTime getCreatedat() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>testshop2.product.updatedAt</code>.
     */
    public ProductRecord setUpdatedat(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.updatedAt</code>.
     */
    public LocalDateTime getUpdatedat() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>testshop2.product.deleted</code>. if this product is
     * marked as deleted
     */
    public ProductRecord setDeleted(Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.deleted</code>. if this product is
     * marked as deleted
     */
    public Boolean getDeleted() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>testshop2.product.creatorId</code>.
     */
    public ProductRecord setCreatorid(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>testshop2.product.creatorId</code>.
     */
    public Integer getCreatorid() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProductRecord
     */
    public ProductRecord() {
        super(Product.PRODUCT);
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    public ProductRecord(Long productid, Integer clientid, BigDecimal price, String typeid, LocalDateTime createdat, LocalDateTime updatedat, Boolean deleted, Integer creatorid) {
        super(Product.PRODUCT);

        setProductid(productid);
        setClientid(clientid);
        setPrice(price);
        setTypeid(typeid);
        setCreatedat(createdat);
        setUpdatedat(updatedat);
        setDeleted(deleted);
        setCreatorid(creatorid);
        resetChangedOnNotNull();
    }
}
