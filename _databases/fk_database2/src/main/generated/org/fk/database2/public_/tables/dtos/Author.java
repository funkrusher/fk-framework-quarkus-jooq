/*
 * This file is generated by jOOQ.
 */
package org.fk.database2.public_.tables.dtos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDate;

import org.fk.core.dto.AbstractDTO;
import org.fk.database2.public_.tables.interfaces.IAuthor;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Author extends AbstractDTO implements IAuthor {

    private static final long serialVersionUID = 1L;

    private Integer author_id;
    private String name;
    private String nationality;
    private LocalDate birth_date;
    private String biography;

    public Author() {}

    public Author(IAuthor value) {
        this.author_id = value.getAuthor_id();
        this.name = value.getName();
        this.nationality = value.getNationality();
        this.birth_date = value.getBirth_date();
        this.biography = value.getBiography();
    }

    public Author(
        Integer author_id,
        String name,
        String nationality,
        LocalDate birth_date,
        String biography
    ) {
        this.author_id = author_id;
        this.name = name;
        this.nationality = nationality;
        this.birth_date = birth_date;
        this.biography = biography;
    }

    /**
     * Getter for <code>public.author.author_id</code>.
     */
    @Override
    public Integer getAuthor_id() {
        return this.author_id;
    }

    /**
     * Setter for <code>public.author.author_id</code>.
     */
    @Override
    public void setAuthor_id(Integer author_id) {
        this.author_id = author_id;
        this.touch();
    }

    /**
     * Getter for <code>public.author.name</code>.
     */
    @NotNull
    @Size(max = 100)
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>public.author.name</code>.
     */
    @Override
    public void setName(String name) {
        this.name = name;
        this.touch();
    }

    /**
     * Getter for <code>public.author.nationality</code>.
     */
    @Size(max = 50)
    @Override
    public String getNationality() {
        return this.nationality;
    }

    /**
     * Setter for <code>public.author.nationality</code>.
     */
    @Override
    public void setNationality(String nationality) {
        this.nationality = nationality;
        this.touch();
    }

    /**
     * Getter for <code>public.author.birth_date</code>.
     */
    @Override
    public LocalDate getBirth_date() {
        return this.birth_date;
    }

    /**
     * Setter for <code>public.author.birth_date</code>.
     */
    @Override
    public void setBirth_date(LocalDate birth_date) {
        this.birth_date = birth_date;
        this.touch();
    }

    /**
     * Getter for <code>public.author.biography</code>.
     */
    @Override
    public String getBiography() {
        return this.biography;
    }

    /**
     * Setter for <code>public.author.biography</code>.
     */
    @Override
    public void setBiography(String biography) {
        this.biography = biography;
        this.touch();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Author other = (Author) obj;
        if (this.author_id == null) {
            if (other.author_id != null)
                return false;
        }
        else if (!this.author_id.equals(other.author_id))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.nationality == null) {
            if (other.nationality != null)
                return false;
        }
        else if (!this.nationality.equals(other.nationality))
            return false;
        if (this.birth_date == null) {
            if (other.birth_date != null)
                return false;
        }
        else if (!this.birth_date.equals(other.birth_date))
            return false;
        if (this.biography == null) {
            if (other.biography != null)
                return false;
        }
        else if (!this.biography.equals(other.biography))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.author_id == null) ? 0 : this.author_id.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.nationality == null) ? 0 : this.nationality.hashCode());
        result = prime * result + ((this.birth_date == null) ? 0 : this.birth_date.hashCode());
        result = prime * result + ((this.biography == null) ? 0 : this.biography.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Author (");

        sb.append(author_id);
        sb.append(", ").append(name);
        sb.append(", ").append(nationality);
        sb.append(", ").append(birth_date);
        sb.append(", ").append(biography);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IAuthor from) {
        setAuthor_id(from.getAuthor_id());
        setName(from.getName());
        setNationality(from.getNationality());
        setBirth_date(from.getBirth_date());
        setBiography(from.getBiography());
    }

    @Override
    public <E extends IAuthor> E into(E into) {
        into.from(this);
        return into;
    }
}
