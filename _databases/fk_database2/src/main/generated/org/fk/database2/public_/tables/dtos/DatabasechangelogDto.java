package org.fk.database2.public_.tables.dtos;

import org.fk.core.dto.DTO;
import org.fk.core.dto.BookKeeper;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import jakarta.xml.bind.annotation.XmlTransient;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.fk.core.dto.AbstractDTO;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import org.fk.database2.public_.tables.interfaces.IDatabasechangelog;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DatabasechangelogDto<T extends DatabasechangelogDto> extends AbstractDTO implements IDatabasechangelog {

    private static final long serialVersionUID = 1L;

    // -------------------------------------------------------------------------
    // Database-Fields (must exist in the associated database table)
    // -------------------------------------------------------------------------
 
    private String id;
    private String author;
    private String filename;
    @Schema(example = "1618312800000", type = SchemaType.NUMBER, format = "date-time", description = "Timestamp in milliseconds since 1970-01-01T00:00:00Z")
    private LocalDateTime dateexecuted;
    private Integer orderexecuted;
    private String exectype;
    private String md5sum;
    private String description;
    private String comments;
    private String tag;
    private String liquibase;
    private String contexts;
    private String labels;
    private String deployment_id;

    // -------------------------------------------------------------------------
    // Constructor(s)
    // -------------------------------------------------------------------------
 
    public DatabasechangelogDto() {}

    public DatabasechangelogDto(IDatabasechangelog value) { this.from(value); }

    // -------------------------------------------------------------------------
    // Database-Fields Setters/Getters
    // -------------------------------------------------------------------------
 
    /**
     * Getter for <code>public.databasechangelog.id</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.databasechangelog.id</code>.
     */
    @Override
    public T setId(String id) {
        this.id = id;
        this.keeper.touch("id");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.author</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String getAuthor() {
        return this.author;
    }

    /**
     * Setter for <code>public.databasechangelog.author</code>.
     */
    @Override
    public T setAuthor(String author) {
        this.author = author;
        this.keeper.touch("author");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.filename</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String getFilename() {
        return this.filename;
    }

    /**
     * Setter for <code>public.databasechangelog.filename</code>.
     */
    @Override
    public T setFilename(String filename) {
        this.filename = filename;
        this.keeper.touch("filename");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.dateexecuted</code>.
     */
    @NotNull
    @Override
    public LocalDateTime getDateexecuted() {
        return this.dateexecuted;
    }

    /**
     * Setter for <code>public.databasechangelog.dateexecuted</code>.
     */
    @Override
    public T setDateexecuted(LocalDateTime dateexecuted) {
        this.dateexecuted = dateexecuted;
        this.keeper.touch("dateexecuted");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.orderexecuted</code>.
     */
    @NotNull
    @Override
    public Integer getOrderexecuted() {
        return this.orderexecuted;
    }

    /**
     * Setter for <code>public.databasechangelog.orderexecuted</code>.
     */
    @Override
    public T setOrderexecuted(Integer orderexecuted) {
        this.orderexecuted = orderexecuted;
        this.keeper.touch("orderexecuted");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.exectype</code>.
     */
    @NotNull
    @Size(max = 10)
    @Override
    public String getExectype() {
        return this.exectype;
    }

    /**
     * Setter for <code>public.databasechangelog.exectype</code>.
     */
    @Override
    public T setExectype(String exectype) {
        this.exectype = exectype;
        this.keeper.touch("exectype");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.md5sum</code>.
     */
    @Size(max = 35)
    @Override
    public String getMd5sum() {
        return this.md5sum;
    }

    /**
     * Setter for <code>public.databasechangelog.md5sum</code>.
     */
    @Override
    public T setMd5sum(String md5sum) {
        this.md5sum = md5sum;
        this.keeper.touch("md5sum");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.description</code>.
     */
    @Size(max = 255)
    @Override
    public String getDescription() {
        return this.description;
    }

    /**
     * Setter for <code>public.databasechangelog.description</code>.
     */
    @Override
    public T setDescription(String description) {
        this.description = description;
        this.keeper.touch("description");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.comments</code>.
     */
    @Size(max = 255)
    @Override
    public String getComments() {
        return this.comments;
    }

    /**
     * Setter for <code>public.databasechangelog.comments</code>.
     */
    @Override
    public T setComments(String comments) {
        this.comments = comments;
        this.keeper.touch("comments");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.tag</code>.
     */
    @Size(max = 255)
    @Override
    public String getTag() {
        return this.tag;
    }

    /**
     * Setter for <code>public.databasechangelog.tag</code>.
     */
    @Override
    public T setTag(String tag) {
        this.tag = tag;
        this.keeper.touch("tag");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.liquibase</code>.
     */
    @Size(max = 20)
    @Override
    public String getLiquibase() {
        return this.liquibase;
    }

    /**
     * Setter for <code>public.databasechangelog.liquibase</code>.
     */
    @Override
    public T setLiquibase(String liquibase) {
        this.liquibase = liquibase;
        this.keeper.touch("liquibase");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.contexts</code>.
     */
    @Size(max = 255)
    @Override
    public String getContexts() {
        return this.contexts;
    }

    /**
     * Setter for <code>public.databasechangelog.contexts</code>.
     */
    @Override
    public T setContexts(String contexts) {
        this.contexts = contexts;
        this.keeper.touch("contexts");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.labels</code>.
     */
    @Size(max = 255)
    @Override
    public String getLabels() {
        return this.labels;
    }

    /**
     * Setter for <code>public.databasechangelog.labels</code>.
     */
    @Override
    public T setLabels(String labels) {
        this.labels = labels;
        this.keeper.touch("labels");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangelog.deployment_id</code>.
     */
    @Size(max = 10)
    @Override
    public String getDeployment_id() {
        return this.deployment_id;
    }

    /**
     * Setter for <code>public.databasechangelog.deployment_id</code>.
     */
    @Override
    public T setDeployment_id(String deployment_id) {
        this.deployment_id = deployment_id;
        this.keeper.touch("deployment_id");
        return (T) this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDatabasechangelog from) {
        setId(from.getId());
        setAuthor(from.getAuthor());
        setFilename(from.getFilename());
        setDateexecuted(from.getDateexecuted());
        setOrderexecuted(from.getOrderexecuted());
        setExectype(from.getExectype());
        setMd5sum(from.getMd5sum());
        setDescription(from.getDescription());
        setComments(from.getComments());
        setTag(from.getTag());
        setLiquibase(from.getLiquibase());
        setContexts(from.getContexts());
        setLabels(from.getLabels());
        setDeployment_id(from.getDeployment_id());
    }

    @Override
    public <E extends IDatabasechangelog> E into(E into) {
        into.from(this);
        return into;
    }

}
