package org.fk.database2.public_.tables.dtos;

import org.fk.core.dto.BookKeeper;
import org.eclipse.microprofile.openapi.annotations.media.Schema;
import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.xml.bind.annotation.XmlTransient;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.fk.core.dto.AbstractDTO;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import org.fk.database2.public_.tables.interfaces.IDatabasechangeloglock;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DatabasechangeloglockDto<T extends DatabasechangeloglockDto> extends AbstractDTO implements IDatabasechangeloglock {

    private static final long serialVersionUID = 1L;

    // -------------------------------------------------------------------------
    // Database-Fields (must exist in the associated database table)
    // -------------------------------------------------------------------------
 
    private Integer id;
    private Boolean locked;
    @Schema(example = "1618312800000", type = SchemaType.NUMBER, format = "date-time", description = "Timestamp in milliseconds since 1970-01-01T00:00:00Z")
    private LocalDateTime lockgranted;
    private String lockedby;

    // -------------------------------------------------------------------------
    // Constructor(s)
    // -------------------------------------------------------------------------
 
    public DatabasechangeloglockDto() {}

    public DatabasechangeloglockDto(IDatabasechangeloglock value) { this.from(value); }

    // -------------------------------------------------------------------------
    // Database-Fields Setters/Getters
    // -------------------------------------------------------------------------
 
    /**
     * Getter for <code>public.databasechangeloglock.id</code>.
     */
    @NotNull
    @Override
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.databasechangeloglock.id</code>.
     */
    @Override
    public T setId(Integer id) {
        this.id = id;
        this.keeper.touch("id");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangeloglock.locked</code>.
     */
    @NotNull
    @Override
    public Boolean getLocked() {
        return this.locked;
    }

    /**
     * Setter for <code>public.databasechangeloglock.locked</code>.
     */
    @Override
    public T setLocked(Boolean locked) {
        this.locked = locked;
        this.keeper.touch("locked");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangeloglock.lockgranted</code>.
     */
    @Override
    public LocalDateTime getLockgranted() {
        return this.lockgranted;
    }

    /**
     * Setter for <code>public.databasechangeloglock.lockgranted</code>.
     */
    @Override
    public T setLockgranted(LocalDateTime lockgranted) {
        this.lockgranted = lockgranted;
        this.keeper.touch("lockgranted");
        return (T) this;
    }

    /**
     * Getter for <code>public.databasechangeloglock.lockedby</code>.
     */
    @Size(max = 255)
    @Override
    public String getLockedby() {
        return this.lockedby;
    }

    /**
     * Setter for <code>public.databasechangeloglock.lockedby</code>.
     */
    @Override
    public T setLockedby(String lockedby) {
        this.lockedby = lockedby;
        this.keeper.touch("lockedby");
        return (T) this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDatabasechangeloglock from) {
        setId(from.getId());
        setLocked(from.getLocked());
        setLockgranted(from.getLockgranted());
        setLockedby(from.getLockedby());
    }

    @Override
    public <E extends IDatabasechangeloglock> E into(E into) {
        into.from(this);
        return into;
    }

}
