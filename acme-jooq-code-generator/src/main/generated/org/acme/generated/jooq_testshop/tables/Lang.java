/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.jooq_testshop.tables;


import jakarta.validation.Valid;

import org.acme.generated.jooq_testshop.JooqTestshop;
import org.acme.generated.jooq_testshop.Keys;
import org.acme.generated.jooq_testshop.tables.records.LangRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Valid
public class Lang extends TableImpl<LangRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq_testshop.lang</code>
     */
    public static final Lang LANG = new Lang();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LangRecord> getRecordType() {
        return LangRecord.class;
    }

    /**
     * The column <code>jooq_testshop.lang.langId</code>.
     */
    public final TableField<LangRecord, Integer> LANGID = createField(DSL.name("langId"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq_testshop.lang.code</code>.
     */
    public final TableField<LangRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CHAR(2).nullable(false), this, "");

    /**
     * The column <code>jooq_testshop.lang.description</code>.
     */
    public final TableField<LangRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(50).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private Lang(Name alias, Table<LangRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lang(Name alias, Table<LangRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq_testshop.lang</code> table reference
     */
    public Lang(String alias) {
        this(DSL.name(alias), LANG);
    }

    /**
     * Create an aliased <code>jooq_testshop.lang</code> table reference
     */
    public Lang(Name alias) {
        this(alias, LANG);
    }

    /**
     * Create a <code>jooq_testshop.lang</code> table reference
     */
    public Lang() {
        this(DSL.name("lang"), null);
    }

    public <O extends Record> Lang(Table<O> child, ForeignKey<O, LangRecord> key) {
        super(child, key, LANG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqTestshop.JOOQ_TESTSHOP;
    }

    @Override
    public Identity<LangRecord, Integer> getIdentity() {
        return (Identity<LangRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LangRecord> getPrimaryKey() {
        return Keys.KEY_LANG_PRIMARY;
    }

    @Override
    public Lang as(String alias) {
        return new Lang(DSL.name(alias), this);
    }

    @Override
    public Lang as(Name alias) {
        return new Lang(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lang rename(String name) {
        return new Lang(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lang rename(Name name) {
        return new Lang(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
