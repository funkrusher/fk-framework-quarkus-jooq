/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.jooq_testshop.tables.daos;


import jakarta.validation.Valid;

import java.util.List;

import org.acme.generated.jooq_testshop.tables.ProductLang;
import org.acme.generated.jooq_testshop.tables.records.ProductLangRecord;
import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Valid
public class ProductLangDao extends DAOImpl<ProductLangRecord, org.acme.generated.jooq_testshop.tables.dtos.ProductLang, Record2<Long, Integer>> {

    /**
     * Create a new ProductLangDao without any configuration
     */
    public ProductLangDao() {
        super(ProductLang.PRODUCT_LANG, org.acme.generated.jooq_testshop.tables.dtos.ProductLang.class);
    }

    /**
     * Create a new ProductLangDao with an attached configuration
     */
    public ProductLangDao(Configuration configuration) {
        super(ProductLang.PRODUCT_LANG, org.acme.generated.jooq_testshop.tables.dtos.ProductLang.class, configuration);
    }

    @Override
    public Record2<Long, Integer> getId(org.acme.generated.jooq_testshop.tables.dtos.ProductLang object) {
        return compositeKeyRecord(object.getProductId(), object.getLangId());
    }

    /**
     * Fetch records that have <code>productId BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.ProductLang> fetchRangeOfProductid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ProductLang.PRODUCT_LANG.PRODUCTID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>productId IN (values)</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.ProductLang> fetchByProductid(Long... values) {
        return fetch(ProductLang.PRODUCT_LANG.PRODUCTID, values);
    }

    /**
     * Fetch records that have <code>langId BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.ProductLang> fetchRangeOfLangid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(ProductLang.PRODUCT_LANG.LANGID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>langId IN (values)</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.ProductLang> fetchByLangid(Integer... values) {
        return fetch(ProductLang.PRODUCT_LANG.LANGID, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.ProductLang> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(ProductLang.PRODUCT_LANG.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.ProductLang> fetchByName(String... values) {
        return fetch(ProductLang.PRODUCT_LANG.NAME, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.ProductLang> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(ProductLang.PRODUCT_LANG.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.ProductLang> fetchByDescription(String... values) {
        return fetch(ProductLang.PRODUCT_LANG.DESCRIPTION, values);
    }
}
