/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.jooq_testshop.tables.daos;


import jakarta.validation.Valid;

import java.util.List;
import java.util.Optional;

import org.acme.generated.jooq_testshop.tables.User;
import org.acme.generated.jooq_testshop.tables.records.UserRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Valid
public class UserDao extends DAOImpl<UserRecord, org.acme.generated.jooq_testshop.tables.dtos.User, Integer> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(User.USER, org.acme.generated.jooq_testshop.tables.dtos.User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(User.USER, org.acme.generated.jooq_testshop.tables.dtos.User.class, configuration);
    }

    @Override
    public Integer getId(org.acme.generated.jooq_testshop.tables.dtos.User object) {
        return object.getUserId();
    }

    /**
     * Fetch records that have <code>userId BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.User> fetchRangeOfUserid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(User.USER.USERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>userId IN (values)</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.User> fetchByUserid(Integer... values) {
        return fetch(User.USER.USERID, values);
    }

    /**
     * Fetch a unique record that has <code>userId = value</code>
     */
    public org.acme.generated.jooq_testshop.tables.dtos.User fetchOneByUserid(Integer value) {
        return fetchOne(User.USER.USERID, value);
    }

    /**
     * Fetch a unique record that has <code>userId = value</code>
     */
    public Optional<org.acme.generated.jooq_testshop.tables.dtos.User> fetchOptionalByUserid(Integer value) {
        return fetchOptional(User.USER.USERID, value);
    }

    /**
     * Fetch records that have <code>clientId BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.User> fetchRangeOfClientid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(User.USER.CLIENTID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>clientId IN (values)</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.User> fetchByClientid(Integer... values) {
        return fetch(User.USER.CLIENTID, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.User> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.User> fetchByEmail(String... values) {
        return fetch(User.USER.EMAIL, values);
    }

    /**
     * Fetch records that have <code>firstname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.User> fetchRangeOfFirstname(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.FIRSTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>firstname IN (values)</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.User> fetchByFirstname(String... values) {
        return fetch(User.USER.FIRSTNAME, values);
    }

    /**
     * Fetch records that have <code>lastname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.User> fetchRangeOfLastname(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.LASTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastname IN (values)</code>
     */
    public List<org.acme.generated.jooq_testshop.tables.dtos.User> fetchByLastname(String... values) {
        return fetch(User.USER.LASTNAME, values);
    }
}
