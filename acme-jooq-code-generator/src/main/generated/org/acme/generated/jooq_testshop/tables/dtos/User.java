/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.jooq_testshop.tables.dtos;


import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.acme.generated.AbstractDTO;
import org.acme.generated.jooq_testshop.tables.interfaces.IUser;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Valid
public class User extends AbstractDTO implements IUser {

    private static final long serialVersionUID = 1L;

    private Integer userId;
    private Integer clientId;
    private String  email;
    private String  firstname;
    private String  lastname;

    public User() {}

    public User(IUser value) {
        this.userId = value.getUserId();
        this.clientId = value.getClientId();
        this.email = value.getEmail();
        this.firstname = value.getFirstname();
        this.lastname = value.getLastname();
    }

    public User(
        Integer userId,
        Integer clientId,
        String  email,
        String  firstname,
        String  lastname
    ) {
        this.userId = userId;
        this.clientId = clientId;
        this.email = email;
        this.firstname = firstname;
        this.lastname = lastname;
    }

    /**
     * Getter for <code>jooq_testshop.user.userId</code>.
     */
    @Override
    public Integer getUserId() {
        return this.userId;
    }

    /**
     * Setter for <code>jooq_testshop.user.userId</code>.
     */
    @Override
    public void setUserId(Integer userId) {
        this.userId = userId;
        this.setAt("userId", userId);
    }

    /**
     * Getter for <code>jooq_testshop.user.clientId</code>.
     */
    @NotNull
    @Override
    public Integer getClientId() {
        return this.clientId;
    }

    /**
     * Setter for <code>jooq_testshop.user.clientId</code>.
     */
    @Override
    public void setClientId(Integer clientId) {
        this.clientId = clientId;
        this.setAt("clientId", clientId);
    }

    /**
     * Getter for <code>jooq_testshop.user.email</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String getEmail() {
        return this.email;
    }

    /**
     * Setter for <code>jooq_testshop.user.email</code>.
     */
    @Override
    public void setEmail(String email) {
        this.email = email;
        this.setAt("email", email);
    }

    /**
     * Getter for <code>jooq_testshop.user.firstname</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String getFirstname() {
        return this.firstname;
    }

    /**
     * Setter for <code>jooq_testshop.user.firstname</code>.
     */
    @Override
    public void setFirstname(String firstname) {
        this.firstname = firstname;
        this.setAt("firstname", firstname);
    }

    /**
     * Getter for <code>jooq_testshop.user.lastname</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String getLastname() {
        return this.lastname;
    }

    /**
     * Setter for <code>jooq_testshop.user.lastname</code>.
     */
    @Override
    public void setLastname(String lastname) {
        this.lastname = lastname;
        this.setAt("lastname", lastname);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final User other = (User) obj;
        if (this.userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!this.userId.equals(other.userId))
            return false;
        if (this.clientId == null) {
            if (other.clientId != null)
                return false;
        }
        else if (!this.clientId.equals(other.clientId))
            return false;
        if (this.email == null) {
            if (other.email != null)
                return false;
        }
        else if (!this.email.equals(other.email))
            return false;
        if (this.firstname == null) {
            if (other.firstname != null)
                return false;
        }
        else if (!this.firstname.equals(other.firstname))
            return false;
        if (this.lastname == null) {
            if (other.lastname != null)
                return false;
        }
        else if (!this.lastname.equals(other.lastname))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        result = prime * result + ((this.clientId == null) ? 0 : this.clientId.hashCode());
        result = prime * result + ((this.email == null) ? 0 : this.email.hashCode());
        result = prime * result + ((this.firstname == null) ? 0 : this.firstname.hashCode());
        result = prime * result + ((this.lastname == null) ? 0 : this.lastname.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("User (");

        sb.append(userId);
        sb.append(", ").append(clientId);
        sb.append(", ").append(email);
        sb.append(", ").append(firstname);
        sb.append(", ").append(lastname);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUser from) {
        setUserId(from.getUserId());
        setClientId(from.getClientId());
        setEmail(from.getEmail());
        setFirstname(from.getFirstname());
        setLastname(from.getLastname());
    }

    @Override
    public <E extends IUser> E into(E into) {
        into.from(this);
        return into;
    }
}
