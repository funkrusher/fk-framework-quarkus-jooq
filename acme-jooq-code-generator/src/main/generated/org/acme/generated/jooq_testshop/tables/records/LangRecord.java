/*
 * This file is generated by jOOQ.
 */
package org.acme.generated.jooq_testshop.tables.records;


import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.acme.generated.jooq_testshop.tables.Lang;
import org.acme.generated.jooq_testshop.tables.interfaces.ILang;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Valid
public class LangRecord extends UpdatableRecordImpl<LangRecord> implements Record3<Integer, String, String>, ILang {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>jooq_testshop.lang.langId</code>.
     */
    @Override
    public void setLangId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>jooq_testshop.lang.langId</code>.
     */
    @Override
    public Integer getLangId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>jooq_testshop.lang.code</code>.
     */
    @Override
    public void setCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>jooq_testshop.lang.code</code>.
     */
    @NotNull
    @Size(max = 2)
    @Override
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>jooq_testshop.lang.description</code>.
     */
    @Override
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>jooq_testshop.lang.description</code>.
     */
    @Size(max = 50)
    @Override
    public String getDescription() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Lang.LANG.LANGID;
    }

    @Override
    public Field<String> field2() {
        return Lang.LANG.CODE;
    }

    @Override
    public Field<String> field3() {
        return Lang.LANG.DESCRIPTION;
    }

    @Override
    public Integer component1() {
        return getLangId();
    }

    @Override
    public String component2() {
        return getCode();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public Integer value1() {
        return getLangId();
    }

    @Override
    public String value2() {
        return getCode();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public LangRecord value1(Integer value) {
        setLangId(value);
        return this;
    }

    @Override
    public LangRecord value2(String value) {
        setCode(value);
        return this;
    }

    @Override
    public LangRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public LangRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ILang from) {
        setLangId(from.getLangId());
        setCode(from.getCode());
        setDescription(from.getDescription());
    }

    @Override
    public <E extends ILang> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LangRecord
     */
    public LangRecord() {
        super(Lang.LANG);
    }

    /**
     * Create a detached, initialised LangRecord
     */
    public LangRecord(Integer langId, String code, String description) {
        super(Lang.LANG);

        setLangId(langId);
        setCode(code);
        setDescription(description);
    }

    /**
     * Create a detached, initialised LangRecord
     */
    public LangRecord(org.acme.generated.jooq_testshop.tables.dtos.Lang value) {
        super(Lang.LANG);

        if (value != null) {
            setLangId(value.getLangId());
            setCode(value.getCode());
            setDescription(value.getDescription());
        }
    }
}
