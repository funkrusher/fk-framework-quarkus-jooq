/*
 * This file is generated by jOOQ.
 */
package org.fk.codegen.testshop;


import org.fk.codegen.testshop.tables.Client;
import org.fk.codegen.testshop.tables.Databasechangeloglock;
import org.fk.codegen.testshop.tables.Lang;
import org.fk.codegen.testshop.tables.Post;
import org.fk.codegen.testshop.tables.Product;
import org.fk.codegen.testshop.tables.ProductLang;
import org.fk.codegen.testshop.tables.QrtzBlobTriggers;
import org.fk.codegen.testshop.tables.QrtzCalendars;
import org.fk.codegen.testshop.tables.QrtzCronTriggers;
import org.fk.codegen.testshop.tables.QrtzFiredTriggers;
import org.fk.codegen.testshop.tables.QrtzJobDetails;
import org.fk.codegen.testshop.tables.QrtzLocks;
import org.fk.codegen.testshop.tables.QrtzPausedTriggerGrps;
import org.fk.codegen.testshop.tables.QrtzSchedulerState;
import org.fk.codegen.testshop.tables.QrtzSimpleTriggers;
import org.fk.codegen.testshop.tables.QrtzSimpropTriggers;
import org.fk.codegen.testshop.tables.QrtzTriggers;
import org.fk.codegen.testshop.tables.Role;
import org.fk.codegen.testshop.tables.Task;
import org.fk.codegen.testshop.tables.User;
import org.fk.codegen.testshop.tables.UserRole;
import org.fk.codegen.testshop.tables.records.ClientRecord;
import org.fk.codegen.testshop.tables.records.DatabasechangeloglockRecord;
import org.fk.codegen.testshop.tables.records.LangRecord;
import org.fk.codegen.testshop.tables.records.PostRecord;
import org.fk.codegen.testshop.tables.records.ProductLangRecord;
import org.fk.codegen.testshop.tables.records.ProductRecord;
import org.fk.codegen.testshop.tables.records.QrtzBlobTriggersRecord;
import org.fk.codegen.testshop.tables.records.QrtzCalendarsRecord;
import org.fk.codegen.testshop.tables.records.QrtzCronTriggersRecord;
import org.fk.codegen.testshop.tables.records.QrtzFiredTriggersRecord;
import org.fk.codegen.testshop.tables.records.QrtzJobDetailsRecord;
import org.fk.codegen.testshop.tables.records.QrtzLocksRecord;
import org.fk.codegen.testshop.tables.records.QrtzPausedTriggerGrpsRecord;
import org.fk.codegen.testshop.tables.records.QrtzSchedulerStateRecord;
import org.fk.codegen.testshop.tables.records.QrtzSimpleTriggersRecord;
import org.fk.codegen.testshop.tables.records.QrtzSimpropTriggersRecord;
import org.fk.codegen.testshop.tables.records.QrtzTriggersRecord;
import org.fk.codegen.testshop.tables.records.RoleRecord;
import org.fk.codegen.testshop.tables.records.TaskRecord;
import org.fk.codegen.testshop.tables.records.UserRecord;
import org.fk.codegen.testshop.tables.records.UserRoleRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * testshop.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ClientRecord> KEY_CLIENT_PRIMARY = Internal.createUniqueKey(Client.CLIENT, DSL.name("KEY_client_PRIMARY"), new TableField[] { Client.CLIENT.CLIENTID }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> KEY_DATABASECHANGELOGLOCK_PRIMARY = Internal.createUniqueKey(Databasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("KEY_DATABASECHANGELOGLOCK_PRIMARY"), new TableField[] { Databasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<LangRecord> KEY_LANG_PRIMARY = Internal.createUniqueKey(Lang.LANG, DSL.name("KEY_lang_PRIMARY"), new TableField[] { Lang.LANG.LANGID }, true);
    public static final UniqueKey<PostRecord> KEY_POST_PRIMARY = Internal.createUniqueKey(Post.POST, DSL.name("KEY_post_PRIMARY"), new TableField[] { Post.POST.ID }, true);
    public static final UniqueKey<ProductRecord> KEY_PRODUCT_PRIMARY = Internal.createUniqueKey(Product.PRODUCT, DSL.name("KEY_product_PRIMARY"), new TableField[] { Product.PRODUCT.PRODUCTID }, true);
    public static final UniqueKey<ProductLangRecord> KEY_PRODUCT_LANG_PRIMARY = Internal.createUniqueKey(ProductLang.PRODUCT_LANG, DSL.name("KEY_product_lang_PRIMARY"), new TableField[] { ProductLang.PRODUCT_LANG.PRODUCTID, ProductLang.PRODUCT_LANG.LANGID }, true);
    public static final UniqueKey<QrtzBlobTriggersRecord> KEY_QRTZ_BLOB_TRIGGERS_PRIMARY = Internal.createUniqueKey(QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS, DSL.name("KEY_QRTZ_BLOB_TRIGGERS_PRIMARY"), new TableField[] { QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS.SCHED_NAME, QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS.TRIGGER_NAME, QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS.TRIGGER_GROUP }, true);
    public static final UniqueKey<QrtzCalendarsRecord> KEY_QRTZ_CALENDARS_PRIMARY = Internal.createUniqueKey(QrtzCalendars.QRTZ_CALENDARS, DSL.name("KEY_QRTZ_CALENDARS_PRIMARY"), new TableField[] { QrtzCalendars.QRTZ_CALENDARS.SCHED_NAME, QrtzCalendars.QRTZ_CALENDARS.CALENDAR_NAME }, true);
    public static final UniqueKey<QrtzCronTriggersRecord> KEY_QRTZ_CRON_TRIGGERS_PRIMARY = Internal.createUniqueKey(QrtzCronTriggers.QRTZ_CRON_TRIGGERS, DSL.name("KEY_QRTZ_CRON_TRIGGERS_PRIMARY"), new TableField[] { QrtzCronTriggers.QRTZ_CRON_TRIGGERS.SCHED_NAME, QrtzCronTriggers.QRTZ_CRON_TRIGGERS.TRIGGER_NAME, QrtzCronTriggers.QRTZ_CRON_TRIGGERS.TRIGGER_GROUP }, true);
    public static final UniqueKey<QrtzFiredTriggersRecord> KEY_QRTZ_FIRED_TRIGGERS_PRIMARY = Internal.createUniqueKey(QrtzFiredTriggers.QRTZ_FIRED_TRIGGERS, DSL.name("KEY_QRTZ_FIRED_TRIGGERS_PRIMARY"), new TableField[] { QrtzFiredTriggers.QRTZ_FIRED_TRIGGERS.SCHED_NAME, QrtzFiredTriggers.QRTZ_FIRED_TRIGGERS.ENTRY_ID }, true);
    public static final UniqueKey<QrtzJobDetailsRecord> KEY_QRTZ_JOB_DETAILS_PRIMARY = Internal.createUniqueKey(QrtzJobDetails.QRTZ_JOB_DETAILS, DSL.name("KEY_QRTZ_JOB_DETAILS_PRIMARY"), new TableField[] { QrtzJobDetails.QRTZ_JOB_DETAILS.SCHED_NAME, QrtzJobDetails.QRTZ_JOB_DETAILS.JOB_NAME, QrtzJobDetails.QRTZ_JOB_DETAILS.JOB_GROUP }, true);
    public static final UniqueKey<QrtzLocksRecord> KEY_QRTZ_LOCKS_PRIMARY = Internal.createUniqueKey(QrtzLocks.QRTZ_LOCKS, DSL.name("KEY_QRTZ_LOCKS_PRIMARY"), new TableField[] { QrtzLocks.QRTZ_LOCKS.SCHED_NAME, QrtzLocks.QRTZ_LOCKS.LOCK_NAME }, true);
    public static final UniqueKey<QrtzPausedTriggerGrpsRecord> KEY_QRTZ_PAUSED_TRIGGER_GRPS_PRIMARY = Internal.createUniqueKey(QrtzPausedTriggerGrps.QRTZ_PAUSED_TRIGGER_GRPS, DSL.name("KEY_QRTZ_PAUSED_TRIGGER_GRPS_PRIMARY"), new TableField[] { QrtzPausedTriggerGrps.QRTZ_PAUSED_TRIGGER_GRPS.SCHED_NAME, QrtzPausedTriggerGrps.QRTZ_PAUSED_TRIGGER_GRPS.TRIGGER_GROUP }, true);
    public static final UniqueKey<QrtzSchedulerStateRecord> KEY_QRTZ_SCHEDULER_STATE_PRIMARY = Internal.createUniqueKey(QrtzSchedulerState.QRTZ_SCHEDULER_STATE, DSL.name("KEY_QRTZ_SCHEDULER_STATE_PRIMARY"), new TableField[] { QrtzSchedulerState.QRTZ_SCHEDULER_STATE.SCHED_NAME, QrtzSchedulerState.QRTZ_SCHEDULER_STATE.INSTANCE_NAME }, true);
    public static final UniqueKey<QrtzSimpleTriggersRecord> KEY_QRTZ_SIMPLE_TRIGGERS_PRIMARY = Internal.createUniqueKey(QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS, DSL.name("KEY_QRTZ_SIMPLE_TRIGGERS_PRIMARY"), new TableField[] { QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS.SCHED_NAME, QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS.TRIGGER_NAME, QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS.TRIGGER_GROUP }, true);
    public static final UniqueKey<QrtzSimpropTriggersRecord> KEY_QRTZ_SIMPROP_TRIGGERS_PRIMARY = Internal.createUniqueKey(QrtzSimpropTriggers.QRTZ_SIMPROP_TRIGGERS, DSL.name("KEY_QRTZ_SIMPROP_TRIGGERS_PRIMARY"), new TableField[] { QrtzSimpropTriggers.QRTZ_SIMPROP_TRIGGERS.SCHED_NAME, QrtzSimpropTriggers.QRTZ_SIMPROP_TRIGGERS.TRIGGER_NAME, QrtzSimpropTriggers.QRTZ_SIMPROP_TRIGGERS.TRIGGER_GROUP }, true);
    public static final UniqueKey<QrtzTriggersRecord> KEY_QRTZ_TRIGGERS_PRIMARY = Internal.createUniqueKey(QrtzTriggers.QRTZ_TRIGGERS, DSL.name("KEY_QRTZ_TRIGGERS_PRIMARY"), new TableField[] { QrtzTriggers.QRTZ_TRIGGERS.SCHED_NAME, QrtzTriggers.QRTZ_TRIGGERS.TRIGGER_NAME, QrtzTriggers.QRTZ_TRIGGERS.TRIGGER_GROUP }, true);
    public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = Internal.createUniqueKey(Role.ROLE, DSL.name("KEY_role_PRIMARY"), new TableField[] { Role.ROLE.ROLEID }, true);
    public static final UniqueKey<TaskRecord> KEY_TASK_PRIMARY = Internal.createUniqueKey(Task.TASK, DSL.name("KEY_task_PRIMARY"), new TableField[] { Task.TASK.TASKID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.USERID }, true);
    public static final UniqueKey<UserRoleRecord> KEY_USER_ROLE_PRIMARY = Internal.createUniqueKey(UserRole.USER_ROLE, DSL.name("KEY_user_role_PRIMARY"), new TableField[] { UserRole.USER_ROLE.USERID, UserRole.USER_ROLE.ROLEID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ProductRecord, ClientRecord> FK_PRODUCT_CLIENTID = Internal.createForeignKey(Product.PRODUCT, DSL.name("fk_product_clientId"), new TableField[] { Product.PRODUCT.CLIENTID }, Keys.KEY_CLIENT_PRIMARY, new TableField[] { Client.CLIENT.CLIENTID }, true);
    public static final ForeignKey<ProductLangRecord, LangRecord> FK_PRODUCT_LANG_LANGID = Internal.createForeignKey(ProductLang.PRODUCT_LANG, DSL.name("fk_product_lang_langId"), new TableField[] { ProductLang.PRODUCT_LANG.LANGID }, Keys.KEY_LANG_PRIMARY, new TableField[] { Lang.LANG.LANGID }, true);
    public static final ForeignKey<ProductLangRecord, ProductRecord> FK_PRODUCT_LANG_PRODUCTID = Internal.createForeignKey(ProductLang.PRODUCT_LANG, DSL.name("fk_product_lang_productId"), new TableField[] { ProductLang.PRODUCT_LANG.PRODUCTID }, Keys.KEY_PRODUCT_PRIMARY, new TableField[] { Product.PRODUCT.PRODUCTID }, true);
    public static final ForeignKey<QrtzBlobTriggersRecord, QrtzTriggersRecord> QRTZ_BLOB_TRIGGERS_IBFK_1 = Internal.createForeignKey(QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS, DSL.name("QRTZ_BLOB_TRIGGERS_ibfk_1"), new TableField[] { QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS.SCHED_NAME, QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS.TRIGGER_NAME, QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS.TRIGGER_GROUP }, Keys.KEY_QRTZ_TRIGGERS_PRIMARY, new TableField[] { QrtzTriggers.QRTZ_TRIGGERS.SCHED_NAME, QrtzTriggers.QRTZ_TRIGGERS.TRIGGER_NAME, QrtzTriggers.QRTZ_TRIGGERS.TRIGGER_GROUP }, true);
    public static final ForeignKey<QrtzCronTriggersRecord, QrtzTriggersRecord> QRTZ_CRON_TRIGGERS_IBFK_1 = Internal.createForeignKey(QrtzCronTriggers.QRTZ_CRON_TRIGGERS, DSL.name("QRTZ_CRON_TRIGGERS_ibfk_1"), new TableField[] { QrtzCronTriggers.QRTZ_CRON_TRIGGERS.SCHED_NAME, QrtzCronTriggers.QRTZ_CRON_TRIGGERS.TRIGGER_NAME, QrtzCronTriggers.QRTZ_CRON_TRIGGERS.TRIGGER_GROUP }, Keys.KEY_QRTZ_TRIGGERS_PRIMARY, new TableField[] { QrtzTriggers.QRTZ_TRIGGERS.SCHED_NAME, QrtzTriggers.QRTZ_TRIGGERS.TRIGGER_NAME, QrtzTriggers.QRTZ_TRIGGERS.TRIGGER_GROUP }, true);
    public static final ForeignKey<QrtzSimpleTriggersRecord, QrtzTriggersRecord> QRTZ_SIMPLE_TRIGGERS_IBFK_1 = Internal.createForeignKey(QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS, DSL.name("QRTZ_SIMPLE_TRIGGERS_ibfk_1"), new TableField[] { QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS.SCHED_NAME, QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS.TRIGGER_NAME, QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS.TRIGGER_GROUP }, Keys.KEY_QRTZ_TRIGGERS_PRIMARY, new TableField[] { QrtzTriggers.QRTZ_TRIGGERS.SCHED_NAME, QrtzTriggers.QRTZ_TRIGGERS.TRIGGER_NAME, QrtzTriggers.QRTZ_TRIGGERS.TRIGGER_GROUP }, true);
    public static final ForeignKey<QrtzSimpropTriggersRecord, QrtzTriggersRecord> QRTZ_SIMPROP_TRIGGERS_IBFK_1 = Internal.createForeignKey(QrtzSimpropTriggers.QRTZ_SIMPROP_TRIGGERS, DSL.name("QRTZ_SIMPROP_TRIGGERS_ibfk_1"), new TableField[] { QrtzSimpropTriggers.QRTZ_SIMPROP_TRIGGERS.SCHED_NAME, QrtzSimpropTriggers.QRTZ_SIMPROP_TRIGGERS.TRIGGER_NAME, QrtzSimpropTriggers.QRTZ_SIMPROP_TRIGGERS.TRIGGER_GROUP }, Keys.KEY_QRTZ_TRIGGERS_PRIMARY, new TableField[] { QrtzTriggers.QRTZ_TRIGGERS.SCHED_NAME, QrtzTriggers.QRTZ_TRIGGERS.TRIGGER_NAME, QrtzTriggers.QRTZ_TRIGGERS.TRIGGER_GROUP }, true);
    public static final ForeignKey<QrtzTriggersRecord, QrtzJobDetailsRecord> QRTZ_TRIGGERS_IBFK_1 = Internal.createForeignKey(QrtzTriggers.QRTZ_TRIGGERS, DSL.name("QRTZ_TRIGGERS_ibfk_1"), new TableField[] { QrtzTriggers.QRTZ_TRIGGERS.SCHED_NAME, QrtzTriggers.QRTZ_TRIGGERS.JOB_NAME, QrtzTriggers.QRTZ_TRIGGERS.JOB_GROUP }, Keys.KEY_QRTZ_JOB_DETAILS_PRIMARY, new TableField[] { QrtzJobDetails.QRTZ_JOB_DETAILS.SCHED_NAME, QrtzJobDetails.QRTZ_JOB_DETAILS.JOB_NAME, QrtzJobDetails.QRTZ_JOB_DETAILS.JOB_GROUP }, true);
    public static final ForeignKey<UserRecord, ClientRecord> FK_USER_CLIENTID = Internal.createForeignKey(User.USER, DSL.name("fk_user_clientId"), new TableField[] { User.USER.CLIENTID }, Keys.KEY_CLIENT_PRIMARY, new TableField[] { Client.CLIENT.CLIENTID }, true);
    public static final ForeignKey<UserRoleRecord, RoleRecord> FK_USER_ROLE_ROLEID = Internal.createForeignKey(UserRole.USER_ROLE, DSL.name("fk_user_role_roleId"), new TableField[] { UserRole.USER_ROLE.ROLEID }, Keys.KEY_ROLE_PRIMARY, new TableField[] { Role.ROLE.ROLEID }, true);
    public static final ForeignKey<UserRoleRecord, UserRecord> FK_USER_ROLE_USERID = Internal.createForeignKey(UserRole.USER_ROLE, DSL.name("fk_user_role_userId"), new TableField[] { UserRole.USER_ROLE.USERID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.USERID }, true);
}
