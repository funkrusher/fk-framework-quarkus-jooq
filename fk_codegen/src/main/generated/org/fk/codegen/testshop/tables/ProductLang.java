/*
 * This file is generated by jOOQ.
 */
package org.fk.codegen.testshop.tables;


import jakarta.validation.Valid;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.fk.codegen.testshop.Keys;
import org.fk.codegen.testshop.Testshop;
import org.fk.codegen.testshop.tables.Lang.LangPath;
import org.fk.codegen.testshop.tables.Product.ProductPath;
import org.fk.codegen.testshop.tables.records.ProductLangRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Valid
public class ProductLang extends TableImpl<ProductLangRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testshop.product_lang</code>
     */
    public static final ProductLang PRODUCT_LANG = new ProductLang();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductLangRecord> getRecordType() {
        return ProductLangRecord.class;
    }

    /**
     * The column <code>testshop.product_lang.productId</code>.
     */
    public final TableField<ProductLangRecord, Long> PRODUCTID = createField(DSL.name("productId"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testshop.product_lang.langId</code>.
     */
    public final TableField<ProductLangRecord, Integer> LANGID = createField(DSL.name("langId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>testshop.product_lang.name</code>.
     */
    public final TableField<ProductLangRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>testshop.product_lang.description</code>.
     */
    public final TableField<ProductLangRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    private ProductLang(Name alias, Table<ProductLangRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductLang(Name alias, Table<ProductLangRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testshop.product_lang</code> table reference
     */
    public ProductLang(String alias) {
        this(DSL.name(alias), PRODUCT_LANG);
    }

    /**
     * Create an aliased <code>testshop.product_lang</code> table reference
     */
    public ProductLang(Name alias) {
        this(alias, PRODUCT_LANG);
    }

    /**
     * Create a <code>testshop.product_lang</code> table reference
     */
    public ProductLang() {
        this(DSL.name("product_lang"), null);
    }

    public <O extends Record> ProductLang(Table<O> path, ForeignKey<O, ProductLangRecord> childPath, InverseForeignKey<O, ProductLangRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCT_LANG);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductLangPath extends ProductLang implements Path<ProductLangRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProductLangPath(Table<O> path, ForeignKey<O, ProductLangRecord> childPath, InverseForeignKey<O, ProductLangRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductLangPath(Name alias, Table<ProductLangRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductLangPath as(String alias) {
            return new ProductLangPath(DSL.name(alias), this);
        }

        @Override
        public ProductLangPath as(Name alias) {
            return new ProductLangPath(alias, this);
        }

        @Override
        public ProductLangPath as(Table<?> alias) {
            return new ProductLangPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testshop.TESTSHOP;
    }

    @Override
    public UniqueKey<ProductLangRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_LANG_PRIMARY;
    }

    @Override
    public List<ForeignKey<ProductLangRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PRODUCT_LANG_PRODUCTID, Keys.FK_PRODUCT_LANG_LANGID);
    }

    private transient ProductPath _fk_product_lang_productId;

    /**
     * Get the implicit join path to the <code>testshop.product</code> table.
     */
    public ProductPath fk_product_lang_productId() {
        if (_fk_product_lang_productId == null)
            _fk_product_lang_productId = new ProductPath(this, Keys.FK_PRODUCT_LANG_PRODUCTID, null);

        return _fk_product_lang_productId;
    }

    private transient LangPath _fk_product_lang_langId;

    /**
     * Get the implicit join path to the <code>testshop.lang</code> table.
     */
    public LangPath fk_product_lang_langId() {
        if (_fk_product_lang_langId == null)
            _fk_product_lang_langId = new LangPath(this, Keys.FK_PRODUCT_LANG_LANGID, null);

        return _fk_product_lang_langId;
    }

    @Override
    public ProductLang as(String alias) {
        return new ProductLang(DSL.name(alias), this);
    }

    @Override
    public ProductLang as(Name alias) {
        return new ProductLang(alias, this);
    }

    @Override
    public ProductLang as(Table<?> alias) {
        return new ProductLang(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductLang rename(String name) {
        return new ProductLang(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductLang rename(Name name) {
        return new ProductLang(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductLang rename(Table<?> name) {
        return new ProductLang(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductLang where(Condition condition) {
        return new ProductLang(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductLang where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductLang where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductLang where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductLang where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductLang where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductLang where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductLang where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductLang whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductLang whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
