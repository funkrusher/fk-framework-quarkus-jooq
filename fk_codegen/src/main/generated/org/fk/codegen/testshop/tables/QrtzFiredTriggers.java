/*
 * This file is generated by jOOQ.
 */
package org.fk.codegen.testshop.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.fk.codegen.testshop.Indexes;
import org.fk.codegen.testshop.Keys;
import org.fk.codegen.testshop.Testshop;
import org.fk.codegen.testshop.tables.records.QrtzFiredTriggersRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzFiredTriggers extends TableImpl<QrtzFiredTriggersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testshop.QRTZ_FIRED_TRIGGERS</code>
     */
    public static final QrtzFiredTriggers QRTZ_FIRED_TRIGGERS = new QrtzFiredTriggers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QrtzFiredTriggersRecord> getRecordType() {
        return QrtzFiredTriggersRecord.class;
    }

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_NAME</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, String> SCHED_NAME = createField(DSL.name("SCHED_NAME"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.ENTRY_ID</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, String> ENTRY_ID = createField(DSL.name("ENTRY_ID"), SQLDataType.VARCHAR(95).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_NAME</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, String> TRIGGER_NAME = createField(DSL.name("TRIGGER_NAME"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, String> TRIGGER_GROUP = createField(DSL.name("TRIGGER_GROUP"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.INSTANCE_NAME</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, String> INSTANCE_NAME = createField(DSL.name("INSTANCE_NAME"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.FIRED_TIME</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, Long> FIRED_TIME = createField(DSL.name("FIRED_TIME"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.SCHED_TIME</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, Long> SCHED_TIME = createField(DSL.name("SCHED_TIME"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.PRIORITY</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, Integer> PRIORITY = createField(DSL.name("PRIORITY"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.STATE</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, String> STATE = createField(DSL.name("STATE"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_NAME</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, String> JOB_NAME = createField(DSL.name("JOB_NAME"), SQLDataType.VARCHAR(190).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.JOB_GROUP</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, String> JOB_GROUP = createField(DSL.name("JOB_GROUP"), SQLDataType.VARCHAR(190).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.IS_NONCONCURRENT</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, String> IS_NONCONCURRENT = createField(DSL.name("IS_NONCONCURRENT"), SQLDataType.VARCHAR(1).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>testshop.QRTZ_FIRED_TRIGGERS.REQUESTS_RECOVERY</code>.
     */
    public final TableField<QrtzFiredTriggersRecord, String> REQUESTS_RECOVERY = createField(DSL.name("REQUESTS_RECOVERY"), SQLDataType.VARCHAR(1).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    private QrtzFiredTriggers(Name alias, Table<QrtzFiredTriggersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private QrtzFiredTriggers(Name alias, Table<QrtzFiredTriggersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testshop.QRTZ_FIRED_TRIGGERS</code> table
     * reference
     */
    public QrtzFiredTriggers(String alias) {
        this(DSL.name(alias), QRTZ_FIRED_TRIGGERS);
    }

    /**
     * Create an aliased <code>testshop.QRTZ_FIRED_TRIGGERS</code> table
     * reference
     */
    public QrtzFiredTriggers(Name alias) {
        this(alias, QRTZ_FIRED_TRIGGERS);
    }

    /**
     * Create a <code>testshop.QRTZ_FIRED_TRIGGERS</code> table reference
     */
    public QrtzFiredTriggers() {
        this(DSL.name("QRTZ_FIRED_TRIGGERS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testshop.TESTSHOP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.QRTZ_FIRED_TRIGGERS_IDX_QRTZ_FT_INST_JOB_REQ_RCVRY, Indexes.QRTZ_FIRED_TRIGGERS_IDX_QRTZ_FT_J_G, Indexes.QRTZ_FIRED_TRIGGERS_IDX_QRTZ_FT_JG, Indexes.QRTZ_FIRED_TRIGGERS_IDX_QRTZ_FT_T_G, Indexes.QRTZ_FIRED_TRIGGERS_IDX_QRTZ_FT_TG, Indexes.QRTZ_FIRED_TRIGGERS_IDX_QRTZ_FT_TRIG_INST_NAME);
    }

    @Override
    public UniqueKey<QrtzFiredTriggersRecord> getPrimaryKey() {
        return Keys.KEY_QRTZ_FIRED_TRIGGERS_PRIMARY;
    }

    @Override
    public QrtzFiredTriggers as(String alias) {
        return new QrtzFiredTriggers(DSL.name(alias), this);
    }

    @Override
    public QrtzFiredTriggers as(Name alias) {
        return new QrtzFiredTriggers(alias, this);
    }

    @Override
    public QrtzFiredTriggers as(Table<?> alias) {
        return new QrtzFiredTriggers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzFiredTriggers rename(String name) {
        return new QrtzFiredTriggers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzFiredTriggers rename(Name name) {
        return new QrtzFiredTriggers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzFiredTriggers rename(Table<?> name) {
        return new QrtzFiredTriggers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzFiredTriggers where(Condition condition) {
        return new QrtzFiredTriggers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzFiredTriggers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzFiredTriggers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzFiredTriggers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzFiredTriggers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzFiredTriggers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzFiredTriggers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzFiredTriggers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzFiredTriggers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzFiredTriggers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
