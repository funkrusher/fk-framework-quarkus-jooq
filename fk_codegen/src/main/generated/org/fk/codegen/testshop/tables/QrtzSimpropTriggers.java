/*
 * This file is generated by jOOQ.
 */
package org.fk.codegen.testshop.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.fk.codegen.testshop.Keys;
import org.fk.codegen.testshop.Testshop;
import org.fk.codegen.testshop.tables.QrtzTriggers.QrtzTriggersPath;
import org.fk.codegen.testshop.tables.records.QrtzSimpropTriggersRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzSimpropTriggers extends TableImpl<QrtzSimpropTriggersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testshop.QRTZ_SIMPROP_TRIGGERS</code>
     */
    public static final QrtzSimpropTriggers QRTZ_SIMPROP_TRIGGERS = new QrtzSimpropTriggers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QrtzSimpropTriggersRecord> getRecordType() {
        return QrtzSimpropTriggersRecord.class;
    }

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.SCHED_NAME</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> SCHED_NAME = createField(DSL.name("SCHED_NAME"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.TRIGGER_NAME</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> TRIGGER_NAME = createField(DSL.name("TRIGGER_NAME"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> TRIGGER_GROUP = createField(DSL.name("TRIGGER_GROUP"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.STR_PROP_1</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> STR_PROP_1 = createField(DSL.name("STR_PROP_1"), SQLDataType.VARCHAR(512).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.STR_PROP_2</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> STR_PROP_2 = createField(DSL.name("STR_PROP_2"), SQLDataType.VARCHAR(512).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.STR_PROP_3</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> STR_PROP_3 = createField(DSL.name("STR_PROP_3"), SQLDataType.VARCHAR(512).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.INT_PROP_1</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, Integer> INT_PROP_1 = createField(DSL.name("INT_PROP_1"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.INT_PROP_2</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, Integer> INT_PROP_2 = createField(DSL.name("INT_PROP_2"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.LONG_PROP_1</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, Long> LONG_PROP_1 = createField(DSL.name("LONG_PROP_1"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.LONG_PROP_2</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, Long> LONG_PROP_2 = createField(DSL.name("LONG_PROP_2"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.DEC_PROP_1</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, BigDecimal> DEC_PROP_1 = createField(DSL.name("DEC_PROP_1"), SQLDataType.DECIMAL(13, 4).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.DEC_PROP_2</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, BigDecimal> DEC_PROP_2 = createField(DSL.name("DEC_PROP_2"), SQLDataType.DECIMAL(13, 4).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.BOOL_PROP_1</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> BOOL_PROP_1 = createField(DSL.name("BOOL_PROP_1"), SQLDataType.VARCHAR(1).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>testshop.QRTZ_SIMPROP_TRIGGERS.BOOL_PROP_2</code>.
     */
    public final TableField<QrtzSimpropTriggersRecord, String> BOOL_PROP_2 = createField(DSL.name("BOOL_PROP_2"), SQLDataType.VARCHAR(1).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    private QrtzSimpropTriggers(Name alias, Table<QrtzSimpropTriggersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private QrtzSimpropTriggers(Name alias, Table<QrtzSimpropTriggersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testshop.QRTZ_SIMPROP_TRIGGERS</code> table
     * reference
     */
    public QrtzSimpropTriggers(String alias) {
        this(DSL.name(alias), QRTZ_SIMPROP_TRIGGERS);
    }

    /**
     * Create an aliased <code>testshop.QRTZ_SIMPROP_TRIGGERS</code> table
     * reference
     */
    public QrtzSimpropTriggers(Name alias) {
        this(alias, QRTZ_SIMPROP_TRIGGERS);
    }

    /**
     * Create a <code>testshop.QRTZ_SIMPROP_TRIGGERS</code> table reference
     */
    public QrtzSimpropTriggers() {
        this(DSL.name("QRTZ_SIMPROP_TRIGGERS"), null);
    }

    public <O extends Record> QrtzSimpropTriggers(Table<O> path, ForeignKey<O, QrtzSimpropTriggersRecord> childPath, InverseForeignKey<O, QrtzSimpropTriggersRecord> parentPath) {
        super(path, childPath, parentPath, QRTZ_SIMPROP_TRIGGERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class QrtzSimpropTriggersPath extends QrtzSimpropTriggers implements Path<QrtzSimpropTriggersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> QrtzSimpropTriggersPath(Table<O> path, ForeignKey<O, QrtzSimpropTriggersRecord> childPath, InverseForeignKey<O, QrtzSimpropTriggersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private QrtzSimpropTriggersPath(Name alias, Table<QrtzSimpropTriggersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public QrtzSimpropTriggersPath as(String alias) {
            return new QrtzSimpropTriggersPath(DSL.name(alias), this);
        }

        @Override
        public QrtzSimpropTriggersPath as(Name alias) {
            return new QrtzSimpropTriggersPath(alias, this);
        }

        @Override
        public QrtzSimpropTriggersPath as(Table<?> alias) {
            return new QrtzSimpropTriggersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testshop.TESTSHOP;
    }

    @Override
    public UniqueKey<QrtzSimpropTriggersRecord> getPrimaryKey() {
        return Keys.KEY_QRTZ_SIMPROP_TRIGGERS_PRIMARY;
    }

    @Override
    public List<ForeignKey<QrtzSimpropTriggersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.QRTZ_SIMPROP_TRIGGERS_IBFK_1);
    }

    private transient QrtzTriggersPath _QRTZ_SIMPROP_TRIGGERS_ibfk_1;

    /**
     * Get the implicit join path to the <code>testshop.QRTZ_TRIGGERS</code>
     * table.
     */
    public QrtzTriggersPath QRTZ_SIMPROP_TRIGGERS_ibfk_1() {
        if (_QRTZ_SIMPROP_TRIGGERS_ibfk_1 == null)
            _QRTZ_SIMPROP_TRIGGERS_ibfk_1 = new QrtzTriggersPath(this, Keys.QRTZ_SIMPROP_TRIGGERS_IBFK_1, null);

        return _QRTZ_SIMPROP_TRIGGERS_ibfk_1;
    }

    @Override
    public QrtzSimpropTriggers as(String alias) {
        return new QrtzSimpropTriggers(DSL.name(alias), this);
    }

    @Override
    public QrtzSimpropTriggers as(Name alias) {
        return new QrtzSimpropTriggers(alias, this);
    }

    @Override
    public QrtzSimpropTriggers as(Table<?> alias) {
        return new QrtzSimpropTriggers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSimpropTriggers rename(String name) {
        return new QrtzSimpropTriggers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSimpropTriggers rename(Name name) {
        return new QrtzSimpropTriggers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzSimpropTriggers rename(Table<?> name) {
        return new QrtzSimpropTriggers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSimpropTriggers where(Condition condition) {
        return new QrtzSimpropTriggers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSimpropTriggers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSimpropTriggers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSimpropTriggers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzSimpropTriggers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzSimpropTriggers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzSimpropTriggers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzSimpropTriggers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSimpropTriggers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzSimpropTriggers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
