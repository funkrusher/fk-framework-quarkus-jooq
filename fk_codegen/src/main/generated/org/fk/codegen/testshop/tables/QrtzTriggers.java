/*
 * This file is generated by jOOQ.
 */
package org.fk.codegen.testshop.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.fk.codegen.testshop.Indexes;
import org.fk.codegen.testshop.Keys;
import org.fk.codegen.testshop.Testshop;
import org.fk.codegen.testshop.tables.QrtzBlobTriggers.QrtzBlobTriggersPath;
import org.fk.codegen.testshop.tables.QrtzCronTriggers.QrtzCronTriggersPath;
import org.fk.codegen.testshop.tables.QrtzJobDetails.QrtzJobDetailsPath;
import org.fk.codegen.testshop.tables.QrtzSimpleTriggers.QrtzSimpleTriggersPath;
import org.fk.codegen.testshop.tables.QrtzSimpropTriggers.QrtzSimpropTriggersPath;
import org.fk.codegen.testshop.tables.records.QrtzTriggersRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzTriggers extends TableImpl<QrtzTriggersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testshop.QRTZ_TRIGGERS</code>
     */
    public static final QrtzTriggers QRTZ_TRIGGERS = new QrtzTriggers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QrtzTriggersRecord> getRecordType() {
        return QrtzTriggersRecord.class;
    }

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.SCHED_NAME</code>.
     */
    public final TableField<QrtzTriggersRecord, String> SCHED_NAME = createField(DSL.name("SCHED_NAME"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.TRIGGER_NAME</code>.
     */
    public final TableField<QrtzTriggersRecord, String> TRIGGER_NAME = createField(DSL.name("TRIGGER_NAME"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.TRIGGER_GROUP</code>.
     */
    public final TableField<QrtzTriggersRecord, String> TRIGGER_GROUP = createField(DSL.name("TRIGGER_GROUP"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.JOB_NAME</code>.
     */
    public final TableField<QrtzTriggersRecord, String> JOB_NAME = createField(DSL.name("JOB_NAME"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.JOB_GROUP</code>.
     */
    public final TableField<QrtzTriggersRecord, String> JOB_GROUP = createField(DSL.name("JOB_GROUP"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.DESCRIPTION</code>.
     */
    public final TableField<QrtzTriggersRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(250).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.NEXT_FIRE_TIME</code>.
     */
    public final TableField<QrtzTriggersRecord, Long> NEXT_FIRE_TIME = createField(DSL.name("NEXT_FIRE_TIME"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.PREV_FIRE_TIME</code>.
     */
    public final TableField<QrtzTriggersRecord, Long> PREV_FIRE_TIME = createField(DSL.name("PREV_FIRE_TIME"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.PRIORITY</code>.
     */
    public final TableField<QrtzTriggersRecord, Integer> PRIORITY = createField(DSL.name("PRIORITY"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.TRIGGER_STATE</code>.
     */
    public final TableField<QrtzTriggersRecord, String> TRIGGER_STATE = createField(DSL.name("TRIGGER_STATE"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.TRIGGER_TYPE</code>.
     */
    public final TableField<QrtzTriggersRecord, String> TRIGGER_TYPE = createField(DSL.name("TRIGGER_TYPE"), SQLDataType.VARCHAR(8).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.START_TIME</code>.
     */
    public final TableField<QrtzTriggersRecord, Long> START_TIME = createField(DSL.name("START_TIME"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.END_TIME</code>.
     */
    public final TableField<QrtzTriggersRecord, Long> END_TIME = createField(DSL.name("END_TIME"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.CALENDAR_NAME</code>.
     */
    public final TableField<QrtzTriggersRecord, String> CALENDAR_NAME = createField(DSL.name("CALENDAR_NAME"), SQLDataType.VARCHAR(190).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.MISFIRE_INSTR</code>.
     */
    public final TableField<QrtzTriggersRecord, Short> MISFIRE_INSTR = createField(DSL.name("MISFIRE_INSTR"), SQLDataType.SMALLINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>testshop.QRTZ_TRIGGERS.JOB_DATA</code>.
     */
    public final TableField<QrtzTriggersRecord, byte[]> JOB_DATA = createField(DSL.name("JOB_DATA"), SQLDataType.BLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BLOB)), this, "");

    private QrtzTriggers(Name alias, Table<QrtzTriggersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private QrtzTriggers(Name alias, Table<QrtzTriggersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testshop.QRTZ_TRIGGERS</code> table reference
     */
    public QrtzTriggers(String alias) {
        this(DSL.name(alias), QRTZ_TRIGGERS);
    }

    /**
     * Create an aliased <code>testshop.QRTZ_TRIGGERS</code> table reference
     */
    public QrtzTriggers(Name alias) {
        this(alias, QRTZ_TRIGGERS);
    }

    /**
     * Create a <code>testshop.QRTZ_TRIGGERS</code> table reference
     */
    public QrtzTriggers() {
        this(DSL.name("QRTZ_TRIGGERS"), null);
    }

    public <O extends Record> QrtzTriggers(Table<O> path, ForeignKey<O, QrtzTriggersRecord> childPath, InverseForeignKey<O, QrtzTriggersRecord> parentPath) {
        super(path, childPath, parentPath, QRTZ_TRIGGERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class QrtzTriggersPath extends QrtzTriggers implements Path<QrtzTriggersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> QrtzTriggersPath(Table<O> path, ForeignKey<O, QrtzTriggersRecord> childPath, InverseForeignKey<O, QrtzTriggersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private QrtzTriggersPath(Name alias, Table<QrtzTriggersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public QrtzTriggersPath as(String alias) {
            return new QrtzTriggersPath(DSL.name(alias), this);
        }

        @Override
        public QrtzTriggersPath as(Name alias) {
            return new QrtzTriggersPath(alias, this);
        }

        @Override
        public QrtzTriggersPath as(Table<?> alias) {
            return new QrtzTriggersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testshop.TESTSHOP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.QRTZ_TRIGGERS_IDX_QRTZ_T_C, Indexes.QRTZ_TRIGGERS_IDX_QRTZ_T_G, Indexes.QRTZ_TRIGGERS_IDX_QRTZ_T_J, Indexes.QRTZ_TRIGGERS_IDX_QRTZ_T_JG, Indexes.QRTZ_TRIGGERS_IDX_QRTZ_T_N_G_STATE, Indexes.QRTZ_TRIGGERS_IDX_QRTZ_T_N_STATE, Indexes.QRTZ_TRIGGERS_IDX_QRTZ_T_NEXT_FIRE_TIME, Indexes.QRTZ_TRIGGERS_IDX_QRTZ_T_NFT_MISFIRE, Indexes.QRTZ_TRIGGERS_IDX_QRTZ_T_NFT_ST, Indexes.QRTZ_TRIGGERS_IDX_QRTZ_T_NFT_ST_MISFIRE, Indexes.QRTZ_TRIGGERS_IDX_QRTZ_T_NFT_ST_MISFIRE_GRP, Indexes.QRTZ_TRIGGERS_IDX_QRTZ_T_STATE);
    }

    @Override
    public UniqueKey<QrtzTriggersRecord> getPrimaryKey() {
        return Keys.KEY_QRTZ_TRIGGERS_PRIMARY;
    }

    @Override
    public List<ForeignKey<QrtzTriggersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.QRTZ_TRIGGERS_IBFK_1);
    }

    private transient QrtzJobDetailsPath _QRTZ_TRIGGERS_ibfk_1;

    /**
     * Get the implicit join path to the <code>testshop.QRTZ_JOB_DETAILS</code>
     * table.
     */
    public QrtzJobDetailsPath QRTZ_TRIGGERS_ibfk_1() {
        if (_QRTZ_TRIGGERS_ibfk_1 == null)
            _QRTZ_TRIGGERS_ibfk_1 = new QrtzJobDetailsPath(this, Keys.QRTZ_TRIGGERS_IBFK_1, null);

        return _QRTZ_TRIGGERS_ibfk_1;
    }

    private transient QrtzBlobTriggersPath _QRTZ_BLOB_TRIGGERS_ibfk_1;

    /**
     * Get the implicit to-many join path to the
     * <code>testshop.QRTZ_BLOB_TRIGGERS</code> table
     */
    public QrtzBlobTriggersPath QRTZ_BLOB_TRIGGERS_ibfk_1() {
        if (_QRTZ_BLOB_TRIGGERS_ibfk_1 == null)
            _QRTZ_BLOB_TRIGGERS_ibfk_1 = new QrtzBlobTriggersPath(this, null, Keys.QRTZ_BLOB_TRIGGERS_IBFK_1.getInverseKey());

        return _QRTZ_BLOB_TRIGGERS_ibfk_1;
    }

    private transient QrtzCronTriggersPath _QRTZ_CRON_TRIGGERS_ibfk_1;

    /**
     * Get the implicit to-many join path to the
     * <code>testshop.QRTZ_CRON_TRIGGERS</code> table
     */
    public QrtzCronTriggersPath QRTZ_CRON_TRIGGERS_ibfk_1() {
        if (_QRTZ_CRON_TRIGGERS_ibfk_1 == null)
            _QRTZ_CRON_TRIGGERS_ibfk_1 = new QrtzCronTriggersPath(this, null, Keys.QRTZ_CRON_TRIGGERS_IBFK_1.getInverseKey());

        return _QRTZ_CRON_TRIGGERS_ibfk_1;
    }

    private transient QrtzSimpleTriggersPath _QRTZ_SIMPLE_TRIGGERS_ibfk_1;

    /**
     * Get the implicit to-many join path to the
     * <code>testshop.QRTZ_SIMPLE_TRIGGERS</code> table
     */
    public QrtzSimpleTriggersPath QRTZ_SIMPLE_TRIGGERS_ibfk_1() {
        if (_QRTZ_SIMPLE_TRIGGERS_ibfk_1 == null)
            _QRTZ_SIMPLE_TRIGGERS_ibfk_1 = new QrtzSimpleTriggersPath(this, null, Keys.QRTZ_SIMPLE_TRIGGERS_IBFK_1.getInverseKey());

        return _QRTZ_SIMPLE_TRIGGERS_ibfk_1;
    }

    private transient QrtzSimpropTriggersPath _QRTZ_SIMPROP_TRIGGERS_ibfk_1;

    /**
     * Get the implicit to-many join path to the
     * <code>testshop.QRTZ_SIMPROP_TRIGGERS</code> table
     */
    public QrtzSimpropTriggersPath QRTZ_SIMPROP_TRIGGERS_ibfk_1() {
        if (_QRTZ_SIMPROP_TRIGGERS_ibfk_1 == null)
            _QRTZ_SIMPROP_TRIGGERS_ibfk_1 = new QrtzSimpropTriggersPath(this, null, Keys.QRTZ_SIMPROP_TRIGGERS_IBFK_1.getInverseKey());

        return _QRTZ_SIMPROP_TRIGGERS_ibfk_1;
    }

    @Override
    public QrtzTriggers as(String alias) {
        return new QrtzTriggers(DSL.name(alias), this);
    }

    @Override
    public QrtzTriggers as(Name alias) {
        return new QrtzTriggers(alias, this);
    }

    @Override
    public QrtzTriggers as(Table<?> alias) {
        return new QrtzTriggers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzTriggers rename(String name) {
        return new QrtzTriggers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzTriggers rename(Name name) {
        return new QrtzTriggers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzTriggers rename(Table<?> name) {
        return new QrtzTriggers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzTriggers where(Condition condition) {
        return new QrtzTriggers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzTriggers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzTriggers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzTriggers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzTriggers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzTriggers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzTriggers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzTriggers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzTriggers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzTriggers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
