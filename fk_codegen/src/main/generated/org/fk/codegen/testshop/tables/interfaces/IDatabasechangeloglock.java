/*
 * This file is generated by jOOQ.
 */
package org.fk.codegen.testshop.tables.interfaces;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Valid
@Entity
@Table(
    name = "DATABASECHANGELOGLOCK",
    schema = "testshop"
)
public interface IDatabasechangeloglock extends Serializable {

    /**
     * Setter for <code>testshop.DATABASECHANGELOGLOCK.ID</code>.
     */
    public void setID(Integer value);

    /**
     * Getter for <code>testshop.DATABASECHANGELOGLOCK.ID</code>.
     */
    @Id
    @Column(name = "ID", nullable = false)
    @NotNull
    public Integer getID();

    /**
     * Setter for <code>testshop.DATABASECHANGELOGLOCK.LOCKED</code>.
     */
    public void setLOCKED(Byte value);

    /**
     * Getter for <code>testshop.DATABASECHANGELOGLOCK.LOCKED</code>.
     */
    @Column(name = "LOCKED", nullable = false)
    @NotNull
    public Byte getLOCKED();

    /**
     * Setter for <code>testshop.DATABASECHANGELOGLOCK.LOCKGRANTED</code>.
     */
    public void setLOCKGRANTED(LocalDateTime value);

    /**
     * Getter for <code>testshop.DATABASECHANGELOGLOCK.LOCKGRANTED</code>.
     */
    @Column(name = "LOCKGRANTED")
    public LocalDateTime getLOCKGRANTED();

    /**
     * Setter for <code>testshop.DATABASECHANGELOGLOCK.LOCKEDBY</code>.
     */
    public void setLOCKEDBY(String value);

    /**
     * Getter for <code>testshop.DATABASECHANGELOGLOCK.LOCKEDBY</code>.
     */
    @Column(name = "LOCKEDBY", length = 255)
    @Size(max = 255)
    public String getLOCKEDBY();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IDatabasechangeloglock
     */
    public void from(IDatabasechangeloglock from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IDatabasechangeloglock
     */
    public <E extends IDatabasechangeloglock> E into(E into);
}
