/*
 * This file is generated by jOOQ.
 */
package org.fk.codegen.testshop.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.codegen.testshop.tables.Init;
import org.fk.codegen.testshop.tables.interfaces.IInit;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InitRecord extends TableRecordImpl<InitRecord> implements IInit {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop.init.initialized</code>.
     */
    @Override
    public void setInitialized(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>testshop.init.initialized</code>.
     */
    @NotNull
    @Size(max = 255)
    @Override
    public String getInitialized() {
        return (String) get(0);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IInit from) {
        setInitialized(from.getInitialized());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IInit> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InitRecord
     */
    public InitRecord() {
        super(Init.INIT);
    }

    /**
     * Create a detached, initialised InitRecord
     */
    public InitRecord(String initialized) {
        super(Init.INIT);

        setInitialized(initialized);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised InitRecord
     */
    public InitRecord(org.fk.codegen.testshop.tables.dtos.Init value) {
        super(Init.INIT);

        if (value != null) {
            setInitialized(value.getInitialized());
            resetChangedOnNotNull();
        }
    }
}
