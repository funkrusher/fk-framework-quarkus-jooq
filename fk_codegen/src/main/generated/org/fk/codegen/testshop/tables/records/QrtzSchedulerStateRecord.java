/*
 * This file is generated by jOOQ.
 */
package org.fk.codegen.testshop.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import org.fk.codegen.testshop.tables.QrtzSchedulerState;
import org.fk.codegen.testshop.tables.interfaces.IQrtzSchedulerState;
import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzSchedulerStateRecord extends UpdatableRecordImpl<QrtzSchedulerStateRecord> implements IQrtzSchedulerState {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>testshop.QRTZ_SCHEDULER_STATE.SCHED_NAME</code>.
     */
    @Override
    public void setSCHED_NAME(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>testshop.QRTZ_SCHEDULER_STATE.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    @Override
    public String getSCHED_NAME() {
        return (String) get(0);
    }

    /**
     * Setter for <code>testshop.QRTZ_SCHEDULER_STATE.INSTANCE_NAME</code>.
     */
    @Override
    public void setINSTANCE_NAME(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>testshop.QRTZ_SCHEDULER_STATE.INSTANCE_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getINSTANCE_NAME() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testshop.QRTZ_SCHEDULER_STATE.LAST_CHECKIN_TIME</code>.
     */
    @Override
    public void setLAST_CHECKIN_TIME(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>testshop.QRTZ_SCHEDULER_STATE.LAST_CHECKIN_TIME</code>.
     */
    @NotNull
    @Override
    public Long getLAST_CHECKIN_TIME() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>testshop.QRTZ_SCHEDULER_STATE.CHECKIN_INTERVAL</code>.
     */
    @Override
    public void setCHECKIN_INTERVAL(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>testshop.QRTZ_SCHEDULER_STATE.CHECKIN_INTERVAL</code>.
     */
    @NotNull
    @Override
    public Long getCHECKIN_INTERVAL() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IQrtzSchedulerState from) {
        setSCHED_NAME(from.getSCHED_NAME());
        setINSTANCE_NAME(from.getINSTANCE_NAME());
        setLAST_CHECKIN_TIME(from.getLAST_CHECKIN_TIME());
        setCHECKIN_INTERVAL(from.getCHECKIN_INTERVAL());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IQrtzSchedulerState> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QrtzSchedulerStateRecord
     */
    public QrtzSchedulerStateRecord() {
        super(QrtzSchedulerState.QRTZ_SCHEDULER_STATE);
    }

    /**
     * Create a detached, initialised QrtzSchedulerStateRecord
     */
    public QrtzSchedulerStateRecord(String SCHED_NAME, String INSTANCE_NAME, Long LAST_CHECKIN_TIME, Long CHECKIN_INTERVAL) {
        super(QrtzSchedulerState.QRTZ_SCHEDULER_STATE);

        setSCHED_NAME(SCHED_NAME);
        setINSTANCE_NAME(INSTANCE_NAME);
        setLAST_CHECKIN_TIME(LAST_CHECKIN_TIME);
        setCHECKIN_INTERVAL(CHECKIN_INTERVAL);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised QrtzSchedulerStateRecord
     */
    public QrtzSchedulerStateRecord(org.fk.codegen.testshop.tables.dtos.QrtzSchedulerState value) {
        super(QrtzSchedulerState.QRTZ_SCHEDULER_STATE);

        if (value != null) {
            setSCHED_NAME(value.getSCHED_NAME());
            setINSTANCE_NAME(value.getINSTANCE_NAME());
            setLAST_CHECKIN_TIME(value.getLAST_CHECKIN_TIME());
            setCHECKIN_INTERVAL(value.getCHECKIN_INTERVAL());
            resetChangedOnNotNull();
        }
    }
}
