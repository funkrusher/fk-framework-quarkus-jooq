/*
 * This file is generated by jOOQ.
 */
package org.fk.generated.testshop.tables;


import jakarta.validation.Valid;

import java.util.Collection;

import org.fk.generated.testshop.Keys;
import org.fk.generated.testshop.Testshop;
import org.fk.generated.testshop.tables.Product.ProductPath;
import org.fk.generated.testshop.tables.User.UserPath;
import org.fk.generated.testshop.tables.records.ClientRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Valid
public class Client extends TableImpl<ClientRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testshop.client</code>
     */
    public static final Client CLIENT = new Client();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientRecord> getRecordType() {
        return ClientRecord.class;
    }

    /**
     * The column <code>testshop.client.clientId</code>.
     */
    public final TableField<ClientRecord, Integer> CLIENTID = createField(DSL.name("clientId"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    private Client(Name alias, Table<ClientRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Client(Name alias, Table<ClientRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testshop.client</code> table reference
     */
    public Client(String alias) {
        this(DSL.name(alias), CLIENT);
    }

    /**
     * Create an aliased <code>testshop.client</code> table reference
     */
    public Client(Name alias) {
        this(alias, CLIENT);
    }

    /**
     * Create a <code>testshop.client</code> table reference
     */
    public Client() {
        this(DSL.name("client"), null);
    }

    public <O extends Record> Client(Table<O> path, ForeignKey<O, ClientRecord> childPath, InverseForeignKey<O, ClientRecord> parentPath) {
        super(path, childPath, parentPath, CLIENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ClientPath extends Client implements Path<ClientRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ClientPath(Table<O> path, ForeignKey<O, ClientRecord> childPath, InverseForeignKey<O, ClientRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ClientPath(Name alias, Table<ClientRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ClientPath as(String alias) {
            return new ClientPath(DSL.name(alias), this);
        }

        @Override
        public ClientPath as(Name alias) {
            return new ClientPath(alias, this);
        }

        @Override
        public ClientPath as(Table<?> alias) {
            return new ClientPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testshop.TESTSHOP;
    }

    @Override
    public Identity<ClientRecord, Integer> getIdentity() {
        return (Identity<ClientRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ClientRecord> getPrimaryKey() {
        return Keys.KEY_CLIENT_PRIMARY;
    }

    private transient ProductPath _fk_product_clientId;

    /**
     * Get the implicit to-many join path to the <code>testshop.product</code>
     * table
     */
    public ProductPath fk_product_clientId() {
        if (_fk_product_clientId == null)
            _fk_product_clientId = new ProductPath(this, null, Keys.FK_PRODUCT_CLIENTID.getInverseKey());

        return _fk_product_clientId;
    }

    private transient UserPath _fk_user_clientId;

    /**
     * Get the implicit to-many join path to the <code>testshop.user</code>
     * table
     */
    public UserPath fk_user_clientId() {
        if (_fk_user_clientId == null)
            _fk_user_clientId = new UserPath(this, null, Keys.FK_USER_CLIENTID.getInverseKey());

        return _fk_user_clientId;
    }

    @Override
    public Client as(String alias) {
        return new Client(DSL.name(alias), this);
    }

    @Override
    public Client as(Name alias) {
        return new Client(alias, this);
    }

    @Override
    public Client as(Table<?> alias) {
        return new Client(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Client rename(String name) {
        return new Client(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Client rename(Name name) {
        return new Client(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Client rename(Table<?> name) {
        return new Client(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Client where(Condition condition) {
        return new Client(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Client where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Client where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Client where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Client where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Client where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Client where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Client where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Client whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Client whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
