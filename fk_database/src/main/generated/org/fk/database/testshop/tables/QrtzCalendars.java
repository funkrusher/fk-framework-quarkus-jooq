/*
 * This file is generated by jOOQ.
 */
package org.fk.database.testshop.tables;


import java.util.Collection;

import org.fk.database.testshop.Keys;
import org.fk.database.testshop.Testshop;
import org.fk.database.testshop.tables.records.QrtzCalendarsRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzCalendars extends TableImpl<QrtzCalendarsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>testshop.QRTZ_CALENDARS</code>
     */
    public static final QrtzCalendars QRTZ_CALENDARS = new QrtzCalendars();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QrtzCalendarsRecord> getRecordType() {
        return QrtzCalendarsRecord.class;
    }

    /**
     * The column <code>testshop.QRTZ_CALENDARS.SCHED_NAME</code>.
     */
    public final TableField<QrtzCalendarsRecord, String> SCHED_NAME = createField(DSL.name("SCHED_NAME"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_CALENDARS.CALENDAR_NAME</code>.
     */
    public final TableField<QrtzCalendarsRecord, String> CALENDAR_NAME = createField(DSL.name("CALENDAR_NAME"), SQLDataType.VARCHAR(190).nullable(false), this, "");

    /**
     * The column <code>testshop.QRTZ_CALENDARS.CALENDAR</code>.
     */
    public final TableField<QrtzCalendarsRecord, byte[]> CALENDAR = createField(DSL.name("CALENDAR"), SQLDataType.BLOB.nullable(false), this, "");

    private QrtzCalendars(Name alias, Table<QrtzCalendarsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private QrtzCalendars(Name alias, Table<QrtzCalendarsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>testshop.QRTZ_CALENDARS</code> table reference
     */
    public QrtzCalendars(String alias) {
        this(DSL.name(alias), QRTZ_CALENDARS);
    }

    /**
     * Create an aliased <code>testshop.QRTZ_CALENDARS</code> table reference
     */
    public QrtzCalendars(Name alias) {
        this(alias, QRTZ_CALENDARS);
    }

    /**
     * Create a <code>testshop.QRTZ_CALENDARS</code> table reference
     */
    public QrtzCalendars() {
        this(DSL.name("QRTZ_CALENDARS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Testshop.TESTSHOP;
    }

    @Override
    public UniqueKey<QrtzCalendarsRecord> getPrimaryKey() {
        return Keys.KEY_QRTZ_CALENDARS_PRIMARY;
    }

    @Override
    public QrtzCalendars as(String alias) {
        return new QrtzCalendars(DSL.name(alias), this);
    }

    @Override
    public QrtzCalendars as(Name alias) {
        return new QrtzCalendars(alias, this);
    }

    @Override
    public QrtzCalendars as(Table<?> alias) {
        return new QrtzCalendars(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzCalendars rename(String name) {
        return new QrtzCalendars(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzCalendars rename(Name name) {
        return new QrtzCalendars(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QrtzCalendars rename(Table<?> name) {
        return new QrtzCalendars(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzCalendars where(Condition condition) {
        return new QrtzCalendars(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzCalendars where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzCalendars where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzCalendars where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzCalendars where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzCalendars where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzCalendars where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QrtzCalendars where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzCalendars whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QrtzCalendars whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
