/*
 * This file is generated by jOOQ.
 */
package org.fk.database.testshop.tables.dtos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.util.Arrays;

import org.fk.core.dto.AbstractDTO;
import org.fk.database.testshop.tables.interfaces.IQrtzJobDetails;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QrtzJobDetails extends AbstractDTO implements IQrtzJobDetails {

    private static final long serialVersionUID = 1L;

    private String SCHED_NAME;
    private String JOB_NAME;
    private String JOB_GROUP;
    private String DESCRIPTION;
    private String JOB_CLASS_NAME;
    private String IS_DURABLE;
    private String IS_NONCONCURRENT;
    private String IS_UPDATE_DATA;
    private String REQUESTS_RECOVERY;
    private byte[] JOB_DATA;

    public QrtzJobDetails() {}

    public QrtzJobDetails(IQrtzJobDetails value) {
        this.SCHED_NAME = value.getSCHED_NAME();
        this.JOB_NAME = value.getJOB_NAME();
        this.JOB_GROUP = value.getJOB_GROUP();
        this.DESCRIPTION = value.getDESCRIPTION();
        this.JOB_CLASS_NAME = value.getJOB_CLASS_NAME();
        this.IS_DURABLE = value.getIS_DURABLE();
        this.IS_NONCONCURRENT = value.getIS_NONCONCURRENT();
        this.IS_UPDATE_DATA = value.getIS_UPDATE_DATA();
        this.REQUESTS_RECOVERY = value.getREQUESTS_RECOVERY();
        this.JOB_DATA = value.getJOB_DATA();
    }

    public QrtzJobDetails(
        String SCHED_NAME,
        String JOB_NAME,
        String JOB_GROUP,
        String DESCRIPTION,
        String JOB_CLASS_NAME,
        String IS_DURABLE,
        String IS_NONCONCURRENT,
        String IS_UPDATE_DATA,
        String REQUESTS_RECOVERY,
        byte[] JOB_DATA
    ) {
        this.SCHED_NAME = SCHED_NAME;
        this.JOB_NAME = JOB_NAME;
        this.JOB_GROUP = JOB_GROUP;
        this.DESCRIPTION = DESCRIPTION;
        this.JOB_CLASS_NAME = JOB_CLASS_NAME;
        this.IS_DURABLE = IS_DURABLE;
        this.IS_NONCONCURRENT = IS_NONCONCURRENT;
        this.IS_UPDATE_DATA = IS_UPDATE_DATA;
        this.REQUESTS_RECOVERY = REQUESTS_RECOVERY;
        this.JOB_DATA = JOB_DATA;
    }

    /**
     * Getter for <code>testshop.QRTZ_JOB_DETAILS.SCHED_NAME</code>.
     */
    @NotNull
    @Size(max = 120)
    @Override
    public String getSCHED_NAME() {
        return this.SCHED_NAME;
    }

    /**
     * Setter for <code>testshop.QRTZ_JOB_DETAILS.SCHED_NAME</code>.
     */
    @Override
    public void setSCHED_NAME(String SCHED_NAME) {
        this.SCHED_NAME = SCHED_NAME;
        this.touch();
    }

    /**
     * Getter for <code>testshop.QRTZ_JOB_DETAILS.JOB_NAME</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getJOB_NAME() {
        return this.JOB_NAME;
    }

    /**
     * Setter for <code>testshop.QRTZ_JOB_DETAILS.JOB_NAME</code>.
     */
    @Override
    public void setJOB_NAME(String JOB_NAME) {
        this.JOB_NAME = JOB_NAME;
        this.touch();
    }

    /**
     * Getter for <code>testshop.QRTZ_JOB_DETAILS.JOB_GROUP</code>.
     */
    @NotNull
    @Size(max = 190)
    @Override
    public String getJOB_GROUP() {
        return this.JOB_GROUP;
    }

    /**
     * Setter for <code>testshop.QRTZ_JOB_DETAILS.JOB_GROUP</code>.
     */
    @Override
    public void setJOB_GROUP(String JOB_GROUP) {
        this.JOB_GROUP = JOB_GROUP;
        this.touch();
    }

    /**
     * Getter for <code>testshop.QRTZ_JOB_DETAILS.DESCRIPTION</code>.
     */
    @Size(max = 250)
    @Override
    public String getDESCRIPTION() {
        return this.DESCRIPTION;
    }

    /**
     * Setter for <code>testshop.QRTZ_JOB_DETAILS.DESCRIPTION</code>.
     */
    @Override
    public void setDESCRIPTION(String DESCRIPTION) {
        this.DESCRIPTION = DESCRIPTION;
        this.touch();
    }

    /**
     * Getter for <code>testshop.QRTZ_JOB_DETAILS.JOB_CLASS_NAME</code>.
     */
    @NotNull
    @Size(max = 250)
    @Override
    public String getJOB_CLASS_NAME() {
        return this.JOB_CLASS_NAME;
    }

    /**
     * Setter for <code>testshop.QRTZ_JOB_DETAILS.JOB_CLASS_NAME</code>.
     */
    @Override
    public void setJOB_CLASS_NAME(String JOB_CLASS_NAME) {
        this.JOB_CLASS_NAME = JOB_CLASS_NAME;
        this.touch();
    }

    /**
     * Getter for <code>testshop.QRTZ_JOB_DETAILS.IS_DURABLE</code>.
     */
    @NotNull
    @Size(max = 1)
    @Override
    public String getIS_DURABLE() {
        return this.IS_DURABLE;
    }

    /**
     * Setter for <code>testshop.QRTZ_JOB_DETAILS.IS_DURABLE</code>.
     */
    @Override
    public void setIS_DURABLE(String IS_DURABLE) {
        this.IS_DURABLE = IS_DURABLE;
        this.touch();
    }

    /**
     * Getter for <code>testshop.QRTZ_JOB_DETAILS.IS_NONCONCURRENT</code>.
     */
    @NotNull
    @Size(max = 1)
    @Override
    public String getIS_NONCONCURRENT() {
        return this.IS_NONCONCURRENT;
    }

    /**
     * Setter for <code>testshop.QRTZ_JOB_DETAILS.IS_NONCONCURRENT</code>.
     */
    @Override
    public void setIS_NONCONCURRENT(String IS_NONCONCURRENT) {
        this.IS_NONCONCURRENT = IS_NONCONCURRENT;
        this.touch();
    }

    /**
     * Getter for <code>testshop.QRTZ_JOB_DETAILS.IS_UPDATE_DATA</code>.
     */
    @NotNull
    @Size(max = 1)
    @Override
    public String getIS_UPDATE_DATA() {
        return this.IS_UPDATE_DATA;
    }

    /**
     * Setter for <code>testshop.QRTZ_JOB_DETAILS.IS_UPDATE_DATA</code>.
     */
    @Override
    public void setIS_UPDATE_DATA(String IS_UPDATE_DATA) {
        this.IS_UPDATE_DATA = IS_UPDATE_DATA;
        this.touch();
    }

    /**
     * Getter for <code>testshop.QRTZ_JOB_DETAILS.REQUESTS_RECOVERY</code>.
     */
    @NotNull
    @Size(max = 1)
    @Override
    public String getREQUESTS_RECOVERY() {
        return this.REQUESTS_RECOVERY;
    }

    /**
     * Setter for <code>testshop.QRTZ_JOB_DETAILS.REQUESTS_RECOVERY</code>.
     */
    @Override
    public void setREQUESTS_RECOVERY(String REQUESTS_RECOVERY) {
        this.REQUESTS_RECOVERY = REQUESTS_RECOVERY;
        this.touch();
    }

    /**
     * Getter for <code>testshop.QRTZ_JOB_DETAILS.JOB_DATA</code>.
     */
    @Size(max = 65535)
    @Override
    public byte[] getJOB_DATA() {
        return this.JOB_DATA;
    }

    /**
     * Setter for <code>testshop.QRTZ_JOB_DETAILS.JOB_DATA</code>.
     */
    @Override
    public void setJOB_DATA(byte[] JOB_DATA) {
        this.JOB_DATA = JOB_DATA;
        this.touch();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final QrtzJobDetails other = (QrtzJobDetails) obj;
        if (this.SCHED_NAME == null) {
            if (other.SCHED_NAME != null)
                return false;
        }
        else if (!this.SCHED_NAME.equals(other.SCHED_NAME))
            return false;
        if (this.JOB_NAME == null) {
            if (other.JOB_NAME != null)
                return false;
        }
        else if (!this.JOB_NAME.equals(other.JOB_NAME))
            return false;
        if (this.JOB_GROUP == null) {
            if (other.JOB_GROUP != null)
                return false;
        }
        else if (!this.JOB_GROUP.equals(other.JOB_GROUP))
            return false;
        if (this.DESCRIPTION == null) {
            if (other.DESCRIPTION != null)
                return false;
        }
        else if (!this.DESCRIPTION.equals(other.DESCRIPTION))
            return false;
        if (this.JOB_CLASS_NAME == null) {
            if (other.JOB_CLASS_NAME != null)
                return false;
        }
        else if (!this.JOB_CLASS_NAME.equals(other.JOB_CLASS_NAME))
            return false;
        if (this.IS_DURABLE == null) {
            if (other.IS_DURABLE != null)
                return false;
        }
        else if (!this.IS_DURABLE.equals(other.IS_DURABLE))
            return false;
        if (this.IS_NONCONCURRENT == null) {
            if (other.IS_NONCONCURRENT != null)
                return false;
        }
        else if (!this.IS_NONCONCURRENT.equals(other.IS_NONCONCURRENT))
            return false;
        if (this.IS_UPDATE_DATA == null) {
            if (other.IS_UPDATE_DATA != null)
                return false;
        }
        else if (!this.IS_UPDATE_DATA.equals(other.IS_UPDATE_DATA))
            return false;
        if (this.REQUESTS_RECOVERY == null) {
            if (other.REQUESTS_RECOVERY != null)
                return false;
        }
        else if (!this.REQUESTS_RECOVERY.equals(other.REQUESTS_RECOVERY))
            return false;
        if (this.JOB_DATA == null) {
            if (other.JOB_DATA != null)
                return false;
        }
        else if (!Arrays.equals(this.JOB_DATA, other.JOB_DATA))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.SCHED_NAME == null) ? 0 : this.SCHED_NAME.hashCode());
        result = prime * result + ((this.JOB_NAME == null) ? 0 : this.JOB_NAME.hashCode());
        result = prime * result + ((this.JOB_GROUP == null) ? 0 : this.JOB_GROUP.hashCode());
        result = prime * result + ((this.DESCRIPTION == null) ? 0 : this.DESCRIPTION.hashCode());
        result = prime * result + ((this.JOB_CLASS_NAME == null) ? 0 : this.JOB_CLASS_NAME.hashCode());
        result = prime * result + ((this.IS_DURABLE == null) ? 0 : this.IS_DURABLE.hashCode());
        result = prime * result + ((this.IS_NONCONCURRENT == null) ? 0 : this.IS_NONCONCURRENT.hashCode());
        result = prime * result + ((this.IS_UPDATE_DATA == null) ? 0 : this.IS_UPDATE_DATA.hashCode());
        result = prime * result + ((this.REQUESTS_RECOVERY == null) ? 0 : this.REQUESTS_RECOVERY.hashCode());
        result = prime * result + ((this.JOB_DATA == null) ? 0 : Arrays.hashCode(this.JOB_DATA));
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("QrtzJobDetails (");

        sb.append(SCHED_NAME);
        sb.append(", ").append(JOB_NAME);
        sb.append(", ").append(JOB_GROUP);
        sb.append(", ").append(DESCRIPTION);
        sb.append(", ").append(JOB_CLASS_NAME);
        sb.append(", ").append(IS_DURABLE);
        sb.append(", ").append(IS_NONCONCURRENT);
        sb.append(", ").append(IS_UPDATE_DATA);
        sb.append(", ").append(REQUESTS_RECOVERY);
        sb.append(", ").append("[binary...]");

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IQrtzJobDetails from) {
        setSCHED_NAME(from.getSCHED_NAME());
        setJOB_NAME(from.getJOB_NAME());
        setJOB_GROUP(from.getJOB_GROUP());
        setDESCRIPTION(from.getDESCRIPTION());
        setJOB_CLASS_NAME(from.getJOB_CLASS_NAME());
        setIS_DURABLE(from.getIS_DURABLE());
        setIS_NONCONCURRENT(from.getIS_NONCONCURRENT());
        setIS_UPDATE_DATA(from.getIS_UPDATE_DATA());
        setREQUESTS_RECOVERY(from.getREQUESTS_RECOVERY());
        setJOB_DATA(from.getJOB_DATA());
    }

    @Override
    public <E extends IQrtzJobDetails> E into(E into) {
        into.from(this);
        return into;
    }
}
