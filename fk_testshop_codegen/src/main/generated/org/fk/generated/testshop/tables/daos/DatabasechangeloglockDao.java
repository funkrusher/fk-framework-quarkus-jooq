/*
 * This file is generated by jOOQ.
 */
package org.fk.generated.testshop.tables.daos;


import jakarta.validation.Valid;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.fk.generated.testshop.tables.Databasechangeloglock;
import org.fk.generated.testshop.tables.records.DatabasechangeloglockRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Valid
public class DatabasechangeloglockDao extends DAOImpl<DatabasechangeloglockRecord, org.fk.generated.testshop.tables.dtos.Databasechangeloglock, Integer> {

    /**
     * Create a new DatabasechangeloglockDao without any configuration
     */
    public DatabasechangeloglockDao() {
        super(Databasechangeloglock.DATABASECHANGELOGLOCK, org.fk.generated.testshop.tables.dtos.Databasechangeloglock.class);
    }

    /**
     * Create a new DatabasechangeloglockDao with an attached configuration
     */
    public DatabasechangeloglockDao(Configuration configuration) {
        super(Databasechangeloglock.DATABASECHANGELOGLOCK, org.fk.generated.testshop.tables.dtos.Databasechangeloglock.class, configuration);
    }

    @Override
    public Integer getId(org.fk.generated.testshop.tables.dtos.Databasechangeloglock object) {
        return object.getID();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.fk.generated.testshop.tables.dtos.Databasechangeloglock> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Databasechangeloglock.DATABASECHANGELOGLOCK.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<org.fk.generated.testshop.tables.dtos.Databasechangeloglock> fetchById(Integer... values) {
        return fetch(Databasechangeloglock.DATABASECHANGELOGLOCK.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public org.fk.generated.testshop.tables.dtos.Databasechangeloglock fetchOneById(Integer value) {
        return fetchOne(Databasechangeloglock.DATABASECHANGELOGLOCK.ID, value);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public Optional<org.fk.generated.testshop.tables.dtos.Databasechangeloglock> fetchOptionalById(Integer value) {
        return fetchOptional(Databasechangeloglock.DATABASECHANGELOGLOCK.ID, value);
    }

    /**
     * Fetch records that have <code>LOCKED BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.fk.generated.testshop.tables.dtos.Databasechangeloglock> fetchRangeOfLocked(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>LOCKED IN (values)</code>
     */
    public List<org.fk.generated.testshop.tables.dtos.Databasechangeloglock> fetchByLocked(Byte... values) {
        return fetch(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKED, values);
    }

    /**
     * Fetch records that have <code>LOCKGRANTED BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.fk.generated.testshop.tables.dtos.Databasechangeloglock> fetchRangeOfLockgranted(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKGRANTED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>LOCKGRANTED IN (values)</code>
     */
    public List<org.fk.generated.testshop.tables.dtos.Databasechangeloglock> fetchByLockgranted(LocalDateTime... values) {
        return fetch(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKGRANTED, values);
    }

    /**
     * Fetch records that have <code>LOCKEDBY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.fk.generated.testshop.tables.dtos.Databasechangeloglock> fetchRangeOfLockedby(String lowerInclusive, String upperInclusive) {
        return fetchRange(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKEDBY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>LOCKEDBY IN (values)</code>
     */
    public List<org.fk.generated.testshop.tables.dtos.Databasechangeloglock> fetchByLockedby(String... values) {
        return fetch(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKEDBY, values);
    }
}
